/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DomPoolInterface extends ethers.utils.Interface {
  functions: {
    "APR(uint256)": FunctionFragment;
    "add(address,address,uint256,uint256[3],uint256[3])": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bonusEndBlock(uint256)": FunctionFragment;
    "burn(address,uint256)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "dead()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "dom()": FunctionFragment;
    "domsPerBlock()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "emergencyWithdraw(uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "feeA()": FunctionFragment;
    "feeB()": FunctionFragment;
    "feeOwner()": FunctionFragment;
    "getBalanceOfHash(address)": FunctionFragment;
    "getDeposit(address,uint256)": FunctionFragment;
    "getMinWeight(uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256)": FunctionFragment;
    "getPrice(address,address)": FunctionFragment;
    "getProportions(uint256)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "inviter()": FunctionFragment;
    "lastUpdateBlock()": FunctionFragment;
    "migrate(address,address)": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "mrate(uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "period(uint256)": FunctionFragment;
    "poolEarned(address,uint256)": FunctionFragment;
    "poolLength()": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "rewardPerToken(uint256)": FunctionFragment;
    "rewardPerTokenStored()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "set(uint256,bool,uint256,uint256[3],uint256[3])": FunctionFragment;
    "setDomPerBlock(uint256)": FunctionFragment;
    "setFee(uint256,uint256,address)": FunctionFragment;
    "setInviter(address)": FunctionFragment;
    "setPause()": FunctionFragment;
    "setTransferPause()": FunctionFragment;
    "startBlock()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "transferPaused()": FunctionFragment;
    "updateReward(address)": FunctionFragment;
    "usdt()": FunctionFragment;
    "users(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawReward()": FunctionFragment;
    "yinit(uint256)": FunctionFragment;
    "yrate(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "APR", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "add",
    values: [
      string,
      string,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bonusEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dead", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "dom", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "domsPerBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeA", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeB", values?: undefined): string;
  encodeFunctionData(functionFragment: "feeOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBalanceOfHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMinWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getProportions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "inviter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdateBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mrate", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "period",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolEarned",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pools", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rewardPerToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerTokenStored",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [
      BigNumberish,
      boolean,
      BigNumberish,
      [BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDomPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "setInviter", values: [string]): string;
  encodeFunctionData(functionFragment: "setPause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setTransferPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startBlock",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateReward",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;
  encodeFunctionData(functionFragment: "users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "yinit", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "yrate", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "APR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bonusEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domsPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceOfHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProportions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "inviter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolEarned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolLength", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerTokenStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDomPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInviter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTransferPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startBlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "yinit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yrate", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Deposit(address,uint256,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UpdateReward(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256,uint256)": EventFragment;
    "WithdrawReward(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawReward"): EventFragment;
}

export class DomPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DomPoolInterface;

  functions: {
    APR(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yopt: BigNumber;
      cic: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "APR(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yopt: BigNumber;
      cic: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    add(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "add(address,address,uint256,uint256[3],uint256[3])"(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    bonusEndBlock(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "bonusEndBlock(uint256)"(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    burn(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    dead(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dead()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    decimals(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "decimals()"(
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    deposit(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "deposit(uint256,uint256,uint256)"(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    dom(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dom()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    domsPerBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "domsPerBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "factory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    feeA(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeA()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeB(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "feeB()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    feeOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "feeOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    getBalanceOfHash(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      poolHash: BigNumber;
      teamHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBalanceOfHash(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      poolHash: BigNumber;
      teamHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getDeposit(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositInfo: {
        amountA: BigNumber;
        amountB: BigNumber;
        amountR: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        amountA: BigNumber;
        amountB: BigNumber;
        amountR: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    "getDeposit(address,uint256)"(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      depositInfo: {
        amountA: BigNumber;
        amountB: BigNumber;
        amountR: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
      0: {
        amountA: BigNumber;
        amountB: BigNumber;
        amountR: BigNumber;
        0: BigNumber;
        1: BigNumber;
        2: BigNumber;
      };
    }>;

    getMinWeight(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    "getMinWeight(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      multiplier: BigNumber;
      curHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      multiplier: BigNumber;
      curHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPrice(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getPrice(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getProportions(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    "getProportions(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: [BigNumber, BigNumber, BigNumber];
    }>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    inviter(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "inviter()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    lastUpdateBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    migrate(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "migrate(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    mrate(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "mrate(uint256)"(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    name(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "name()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    paused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "paused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    pendingOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    period(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _period: BigNumber;
      0: BigNumber;
    }>;

    "period(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      _period: BigNumber;
      0: BigNumber;
    }>;

    poolEarned(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolEarned(address,uint256)"(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    poolLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "poolLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenA: string;
      tokenB: string;
      status: boolean;
      maxWeight: BigNumber;
      totalAmount: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
      4: BigNumber;
    }>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenA: string;
      tokenB: string;
      status: boolean;
      maxWeight: BigNumber;
      totalAmount: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardPerToken(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPerToken(uint256)"(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    set(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "set(uint256,bool,uint256,uint256[3],uint256[3])"(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDomPerBlock(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDomPerBlock(uint256)"(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFee(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFee(uint256,uint256,address)"(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setInviter(
      _inviter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setInviter(address)"(
      _inviter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPause(overrides?: Overrides): Promise<ContractTransaction>;

    "setPause()"(overrides?: Overrides): Promise<ContractTransaction>;

    setTransferPause(overrides?: Overrides): Promise<ContractTransaction>;

    "setTransferPause()"(overrides?: Overrides): Promise<ContractTransaction>;

    startBlock(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "startBlock()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    symbol(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "symbol()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    totalSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "totalSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferPaused(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "transferPaused()"(
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    updateReward(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateReward(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    usdt(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "usdt()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardPerTokenPaid: BigNumber;
      0: BigNumber;
    }>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      rewardPerTokenPaid: BigNumber;
      0: BigNumber;
    }>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawReward(overrides?: Overrides): Promise<ContractTransaction>;

    "withdrawReward()"(overrides?: Overrides): Promise<ContractTransaction>;

    yinit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "yinit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    yrate(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "yrate(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  APR(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    yopt: BigNumber;
    cic: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "APR(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    yopt: BigNumber;
    cic: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  add(
    _tokenA: string,
    _tokenB: string,
    _maxWeight: BigNumberish,
    _minWeight: [BigNumberish, BigNumberish, BigNumberish],
    _proportions: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "add(address,address,uint256,uint256[3],uint256[3])"(
    _tokenA: string,
    _tokenB: string,
    _maxWeight: BigNumberish,
    _minWeight: [BigNumberish, BigNumberish, BigNumberish],
    _proportions: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bonusEndBlock(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "bonusEndBlock(uint256)"(
    _period: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  burn(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  dead(overrides?: CallOverrides): Promise<string>;

  "dead()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  deposit(
    _pid: BigNumberish,
    _amountT: BigNumberish,
    _rid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "deposit(uint256,uint256,uint256)"(
    _pid: BigNumberish,
    _amountT: BigNumberish,
    _rid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  dom(overrides?: CallOverrides): Promise<string>;

  "dom()"(overrides?: CallOverrides): Promise<string>;

  domsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "domsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earned(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  emergencyWithdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "emergencyWithdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  feeA(overrides?: CallOverrides): Promise<BigNumber>;

  "feeA()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeB(overrides?: CallOverrides): Promise<BigNumber>;

  "feeB()"(overrides?: CallOverrides): Promise<BigNumber>;

  feeOwner(overrides?: CallOverrides): Promise<string>;

  "feeOwner()"(overrides?: CallOverrides): Promise<string>;

  getBalanceOfHash(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    poolHash: BigNumber;
    teamHash: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getBalanceOfHash(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<{
    poolHash: BigNumber;
    teamHash: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getDeposit(
    account: string,
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountA: BigNumber;
    amountB: BigNumber;
    amountR: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  "getDeposit(address,uint256)"(
    account: string,
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    amountA: BigNumber;
    amountB: BigNumber;
    amountR: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
  }>;

  getMinWeight(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getMinWeight(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    multiplier: BigNumber;
    curHash: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "getMultiplier(uint256,uint256)"(
    _from: BigNumberish,
    _to: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    multiplier: BigNumber;
    curHash: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  getPrice(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getPrice(address,address)"(
    tokenA: string,
    tokenB: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getProportions(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  "getProportions(uint256)"(
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  inviter(overrides?: CallOverrides): Promise<string>;

  "inviter()"(overrides?: CallOverrides): Promise<string>;

  lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  migrate(
    token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "migrate(address,address)"(
    token: string,
    _to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  mrate(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "mrate(uint256)"(
    _month: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  period(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "period(uint256)"(
    blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolEarned(
    account: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "poolEarned(address,uint256)"(
    account: string,
    _pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolLength(overrides?: CallOverrides): Promise<BigNumber>;

  "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  pools(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    tokenA: string;
    tokenB: string;
    status: boolean;
    maxWeight: BigNumber;
    totalAmount: BigNumber;
    0: string;
    1: string;
    2: boolean;
    3: BigNumber;
    4: BigNumber;
  }>;

  "pools(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    tokenA: string;
    tokenB: string;
    status: boolean;
    maxWeight: BigNumber;
    totalAmount: BigNumber;
    0: string;
    1: string;
    2: boolean;
    3: BigNumber;
    4: BigNumber;
  }>;

  rewardPerToken(
    domactul: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rewardPerToken(uint256)"(
    domactul: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

  "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "rewards(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  set(
    _pid: BigNumberish,
    _status: boolean,
    _maxWeight: BigNumberish,
    _minWeight: [BigNumberish, BigNumberish, BigNumberish],
    _proportions: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "set(uint256,bool,uint256,uint256[3],uint256[3])"(
    _pid: BigNumberish,
    _status: boolean,
    _maxWeight: BigNumberish,
    _minWeight: [BigNumberish, BigNumberish, BigNumberish],
    _proportions: [BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDomPerBlock(
    _domPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDomPerBlock(uint256)"(
    _domPerBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFee(
    _feeA: BigNumberish,
    _feeB: BigNumberish,
    _feeOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFee(uint256,uint256,address)"(
    _feeA: BigNumberish,
    _feeB: BigNumberish,
    _feeOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setInviter(
    _inviter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setInviter(address)"(
    _inviter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPause(overrides?: Overrides): Promise<ContractTransaction>;

  "setPause()"(overrides?: Overrides): Promise<ContractTransaction>;

  setTransferPause(overrides?: Overrides): Promise<ContractTransaction>;

  "setTransferPause()"(overrides?: Overrides): Promise<ContractTransaction>;

  startBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferPaused(overrides?: CallOverrides): Promise<boolean>;

  "transferPaused()"(overrides?: CallOverrides): Promise<boolean>;

  updateReward(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateReward(address)"(
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  usdt(overrides?: CallOverrides): Promise<string>;

  "usdt()"(overrides?: CallOverrides): Promise<string>;

  users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "users(address)"(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    _pid: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawReward(overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawReward()"(overrides?: Overrides): Promise<ContractTransaction>;

  yinit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "yinit(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yrate(_year: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "yrate(uint256)"(
    _year: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    APR(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yopt: BigNumber;
      cic: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "APR(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      yopt: BigNumber;
      cic: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    add(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "add(address,address,uint256,uint256[3],uint256[3])"(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusEndBlock(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bonusEndBlock(uint256)"(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    dead(overrides?: CallOverrides): Promise<string>;

    "dead()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deposit(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "deposit(uint256,uint256,uint256)"(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dom(overrides?: CallOverrides): Promise<string>;

    "dom()"(overrides?: CallOverrides): Promise<string>;

    domsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "domsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    feeA(overrides?: CallOverrides): Promise<BigNumber>;

    "feeA()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeB(overrides?: CallOverrides): Promise<BigNumber>;

    "feeB()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeOwner(overrides?: CallOverrides): Promise<string>;

    "feeOwner()"(overrides?: CallOverrides): Promise<string>;

    getBalanceOfHash(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      poolHash: BigNumber;
      teamHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getBalanceOfHash(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<{
      poolHash: BigNumber;
      teamHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getDeposit(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      amountR: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    "getDeposit(address,uint256)"(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      amountA: BigNumber;
      amountB: BigNumber;
      amountR: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
    }>;

    getMinWeight(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getMinWeight(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      multiplier: BigNumber;
      curHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      multiplier: BigNumber;
      curHash: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    getPrice(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getPrice(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getProportions(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    "getProportions(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    inviter(overrides?: CallOverrides): Promise<string>;

    "inviter()"(overrides?: CallOverrides): Promise<string>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "migrate(address,address)"(
      token: string,
      _to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mrate(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "mrate(uint256)"(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    period(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolEarned(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolEarned(address,uint256)"(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenA: string;
      tokenB: string;
      status: boolean;
      maxWeight: BigNumber;
      totalAmount: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
      4: BigNumber;
    }>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      tokenA: string;
      tokenB: string;
      status: boolean;
      maxWeight: BigNumber;
      totalAmount: BigNumber;
      0: string;
      1: string;
      2: boolean;
      3: BigNumber;
      4: BigNumber;
    }>;

    rewardPerToken(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(uint256)"(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    "set(uint256,bool,uint256,uint256[3],uint256[3])"(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<void>;

    setDomPerBlock(
      _domPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDomPerBlock(uint256)"(
      _domPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFee(uint256,uint256,address)"(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setInviter(_inviter: string, overrides?: CallOverrides): Promise<void>;

    "setInviter(address)"(
      _inviter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setPause(overrides?: CallOverrides): Promise<void>;

    "setPause()"(overrides?: CallOverrides): Promise<void>;

    setTransferPause(overrides?: CallOverrides): Promise<void>;

    "setTransferPause()"(overrides?: CallOverrides): Promise<void>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPaused(overrides?: CallOverrides): Promise<boolean>;

    "transferPaused()"(overrides?: CallOverrides): Promise<boolean>;

    updateReward(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "updateReward(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<string>;

    "usdt()"(overrides?: CallOverrides): Promise<string>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_pid: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawReward(overrides?: CallOverrides): Promise<void>;

    "withdrawReward()"(overrides?: CallOverrides): Promise<void>;

    yinit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "yinit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yrate(_year: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "yrate(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Deposit(
      undefined: string | null,
      undefined: null,
      undefined: null,
      undefined: null,
      undefined: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UpdateReward(index: null, undefined: null): EventFilter;

    Withdraw(
      undefined: string | null,
      undefined: null,
      undefined: null,
      undefined: null,
      undefined: null
    ): EventFilter;

    WithdrawReward(index: null, undefined: null): EventFilter;
  };

  estimateGas: {
    APR(_pid: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "APR(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    add(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "add(address,address,uint256,uint256[3],uint256[3])"(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bonusEndBlock(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "bonusEndBlock(uint256)"(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "burn(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    dead(overrides?: CallOverrides): Promise<BigNumber>;

    "dead()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    deposit(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "deposit(uint256,uint256,uint256)"(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    dom(overrides?: CallOverrides): Promise<BigNumber>;

    "dom()"(overrides?: CallOverrides): Promise<BigNumber>;

    domsPerBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "domsPerBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeA(overrides?: CallOverrides): Promise<BigNumber>;

    "feeA()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeB(overrides?: CallOverrides): Promise<BigNumber>;

    "feeB()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "feeOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBalanceOfHash(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getBalanceOfHash(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeposit(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeposit(address,uint256)"(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinWeight(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMinWeight(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProportions(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getProportions(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    inviter(overrides?: CallOverrides): Promise<BigNumber>;

    "inviter()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdateBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "migrate(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    mrate(_month: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "mrate(uint256)"(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    period(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "period(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolEarned(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "poolEarned(address,uint256)"(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolLength(overrides?: CallOverrides): Promise<BigNumber>;

    "poolLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerToken(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rewardPerToken(uint256)"(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardPerTokenStored()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    set(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "set(uint256,bool,uint256,uint256[3],uint256[3])"(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDomPerBlock(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDomPerBlock(uint256)"(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFee(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFee(uint256,uint256,address)"(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setInviter(_inviter: string, overrides?: Overrides): Promise<BigNumber>;

    "setInviter(address)"(
      _inviter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPause(overrides?: Overrides): Promise<BigNumber>;

    "setPause()"(overrides?: Overrides): Promise<BigNumber>;

    setTransferPause(overrides?: Overrides): Promise<BigNumber>;

    "setTransferPause()"(overrides?: Overrides): Promise<BigNumber>;

    startBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "startBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferPaused(overrides?: CallOverrides): Promise<BigNumber>;

    "transferPaused()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateReward(account: string, overrides?: Overrides): Promise<BigNumber>;

    "updateReward(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    usdt(overrides?: CallOverrides): Promise<BigNumber>;

    "usdt()"(overrides?: CallOverrides): Promise<BigNumber>;

    users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(_pid: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawReward(overrides?: Overrides): Promise<BigNumber>;

    "withdrawReward()"(overrides?: Overrides): Promise<BigNumber>;

    yinit(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "yinit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yrate(_year: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "yrate(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APR(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "APR(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    add(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "add(address,address,uint256,uint256[3],uint256[3])"(
      _tokenA: string,
      _tokenB: string,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bonusEndBlock(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bonusEndBlock(uint256)"(
      _period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    dead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dead()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,uint256,uint256)"(
      _pid: BigNumberish,
      _amountT: BigNumberish,
      _rid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    dom(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dom()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domsPerBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domsPerBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earned(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "emergencyWithdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeA()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeB()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalanceOfHash(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getBalanceOfHash(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeposit(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeposit(address,uint256)"(
      account: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinWeight(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMinWeight(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMultiplier(uint256,uint256)"(
      _from: BigNumberish,
      _to: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(address,address)"(
      tokenA: string,
      tokenB: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProportions(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getProportions(uint256)"(
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    inviter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "inviter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdateBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    migrate(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "migrate(address,address)"(
      token: string,
      _to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    mrate(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "mrate(uint256)"(
      _month: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "period(uint256)"(
      blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolEarned(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "poolEarned(address,uint256)"(
      account: string,
      _pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "poolLength()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pools(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerToken(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerToken(uint256)"(
      domactul: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPerTokenStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewardPerTokenStored()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rewards(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    set(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "set(uint256,bool,uint256,uint256[3],uint256[3])"(
      _pid: BigNumberish,
      _status: boolean,
      _maxWeight: BigNumberish,
      _minWeight: [BigNumberish, BigNumberish, BigNumberish],
      _proportions: [BigNumberish, BigNumberish, BigNumberish],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDomPerBlock(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDomPerBlock(uint256)"(
      _domPerBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFee(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFee(uint256,uint256,address)"(
      _feeA: BigNumberish,
      _feeB: BigNumberish,
      _feeOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setInviter(
      _inviter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setInviter(address)"(
      _inviter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setPause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setTransferPause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "setTransferPause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    startBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startBlock()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transferPaused()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateReward(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateReward(address)"(
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    usdt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      _pid: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawReward(overrides?: Overrides): Promise<PopulatedTransaction>;

    "withdrawReward()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    yinit(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yinit(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yrate(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yrate(uint256)"(
      _year: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
