/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DomInvitationInterface extends ethers.utils.Interface {
  functions: {
    "Users(address)": FunctionFragment;
    "claimOwnership()": FunctionFragment;
    "dead()": FunctionFragment;
    "domToken()": FunctionFragment;
    "factory()": FunctionFragment;
    "index2User(uint256)": FunctionFragment;
    "isExists(address)": FunctionFragment;
    "levelList(uint256)": FunctionFragment;
    "marketList(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pToken()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "primaryAddr()": FunctionFragment;
    "promote(uint256)": FunctionFragment;
    "redeemPower(address,uint256)": FunctionFragment;
    "referReward(address,uint256)": FunctionFragment;
    "register(address)": FunctionFragment;
    "setDomToken(address)": FunctionFragment;
    "setFactory(address,address)": FunctionFragment;
    "setLevelRewardList(uint256,uint256[20])": FunctionFragment;
    "setMarketList(uint256[10])": FunctionFragment;
    "setPToken(address)": FunctionFragment;
    "transferOwnership(address,bool,bool)": FunctionFragment;
    "usdtToken()": FunctionFragment;
    "userCount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "Users", values: [string]): string;
  encodeFunctionData(
    functionFragment: "claimOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "dead", values?: undefined): string;
  encodeFunctionData(functionFragment: "domToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "index2User",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isExists", values: [string]): string;
  encodeFunctionData(
    functionFragment: "levelList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "primaryAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "promote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemPower",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "referReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "register", values: [string]): string;
  encodeFunctionData(functionFragment: "setDomToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLevelRewardList",
    values: [
      BigNumberish,
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketList",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ]
  ): string;
  encodeFunctionData(functionFragment: "setPToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string, boolean, boolean]
  ): string;
  encodeFunctionData(functionFragment: "usdtToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "userCount", values?: undefined): string;

  decodeFunctionResult(functionFragment: "Users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "domToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "index2User", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "levelList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "marketList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "primaryAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "promote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "register", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDomToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLevelRewardList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdtToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userCount", data: BytesLike): Result;

  events: {
    "Burn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Promote(address,uint256)": EventFragment;
    "Redeem(address,uint256)": EventFragment;
    "Register(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Promote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Register"): EventFragment;
}

export class DomInvitation extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DomInvitationInterface;

  functions: {
    Users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      level: BigNumber;
      burn: BigNumber;
      referrer: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "Users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      level: BigNumber;
      burn: BigNumber;
      referrer: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    dead(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "dead()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    domToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "domToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    factory(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "factory()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    index2User(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "index2User(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    isExists(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "isExists(address)"(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    levelList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "levelList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    owner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "owner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    pendingOwner(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "pendingOwner()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    primaryAddr(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "primaryAddr()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    promote(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "promote(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemPower(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemPower(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    referReward(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "referReward(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    register(
      _referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "register(address)"(
      _referrer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDomToken(
      _domToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDomToken(address)"(
      _domToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setFactory(address,address)"(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setLevelRewardList(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setLevelRewardList(uint256,uint256[20])"(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMarketList(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMarketList(uint256[10])"(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setPToken(
      _pToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setPToken(address)"(
      _pToken: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    usdtToken(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "usdtToken()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    userCount(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "userCount()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  Users(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    level: BigNumber;
    burn: BigNumber;
    referrer: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  "Users(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    level: BigNumber;
    burn: BigNumber;
    referrer: string;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: string;
  }>;

  claimOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "claimOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  dead(overrides?: CallOverrides): Promise<string>;

  "dead()"(overrides?: CallOverrides): Promise<string>;

  domToken(overrides?: CallOverrides): Promise<string>;

  "domToken()"(overrides?: CallOverrides): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  index2User(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "index2User(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isExists(_userAddr: string, overrides?: CallOverrides): Promise<boolean>;

  "isExists(address)"(
    _userAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  levelList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "levelList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  marketList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "marketList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pToken(overrides?: CallOverrides): Promise<string>;

  "pToken()"(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  primaryAddr(overrides?: CallOverrides): Promise<string>;

  "primaryAddr()"(overrides?: CallOverrides): Promise<string>;

  promote(
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "promote(uint256)"(
    _level: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemPower(
    _userAddr: string,
    _power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemPower(address,uint256)"(
    _userAddr: string,
    _power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  referReward(
    _userAddr: string,
    _power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "referReward(address,uint256)"(
    _userAddr: string,
    _power: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  register(
    _referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "register(address)"(
    _referrer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDomToken(
    _domToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDomToken(address)"(
    _domToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: string,
    _usdtToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setFactory(address,address)"(
    _factory: string,
    _usdtToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setLevelRewardList(
    _levelId: BigNumberish,
    _levelRewardList: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setLevelRewardList(uint256,uint256[20])"(
    _levelId: BigNumberish,
    _levelRewardList: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMarketList(
    _marketList: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMarketList(uint256[10])"(
    _marketList: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setPToken(
    _pToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setPToken(address)"(
    _pToken: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address,bool,bool)"(
    newOwner: string,
    direct: boolean,
    renounce: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  usdtToken(overrides?: CallOverrides): Promise<string>;

  "usdtToken()"(overrides?: CallOverrides): Promise<string>;

  userCount(overrides?: CallOverrides): Promise<BigNumber>;

  "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    Users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      level: BigNumber;
      burn: BigNumber;
      referrer: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    "Users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      level: BigNumber;
      burn: BigNumber;
      referrer: string;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: string;
    }>;

    claimOwnership(overrides?: CallOverrides): Promise<void>;

    "claimOwnership()"(overrides?: CallOverrides): Promise<void>;

    dead(overrides?: CallOverrides): Promise<string>;

    "dead()"(overrides?: CallOverrides): Promise<string>;

    domToken(overrides?: CallOverrides): Promise<string>;

    "domToken()"(overrides?: CallOverrides): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    index2User(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "index2User(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isExists(_userAddr: string, overrides?: CallOverrides): Promise<boolean>;

    "isExists(address)"(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    levelList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "levelList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pToken(overrides?: CallOverrides): Promise<string>;

    "pToken()"(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    primaryAddr(overrides?: CallOverrides): Promise<string>;

    "primaryAddr()"(overrides?: CallOverrides): Promise<string>;

    promote(_level: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "promote(uint256)"(
      _level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemPower(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "redeemPower(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    referReward(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "referReward(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    register(_referrer: string, overrides?: CallOverrides): Promise<void>;

    "register(address)"(
      _referrer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDomToken(_domToken: string, overrides?: CallOverrides): Promise<void>;

    "setDomToken(address)"(
      _domToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      _factory: string,
      _usdtToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setFactory(address,address)"(
      _factory: string,
      _usdtToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLevelRewardList(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setLevelRewardList(uint256,uint256[20])"(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketList(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketList(uint256[10])"(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    setPToken(_pToken: string, overrides?: CallOverrides): Promise<void>;

    "setPToken(address)"(
      _pToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    usdtToken(overrides?: CallOverrides): Promise<string>;

    "usdtToken()"(overrides?: CallOverrides): Promise<string>;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Burn(_userAddr: string | null, _amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Promote(_userAddr: string | null, level: null): EventFilter;

    Redeem(_userAddr: string | null, _power: null): EventFilter;

    Register(_userAddr: string | null, _referrer: string | null): EventFilter;
  };

  estimateGas: {
    Users(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "Users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimOwnership(overrides?: Overrides): Promise<BigNumber>;

    "claimOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    dead(overrides?: CallOverrides): Promise<BigNumber>;

    "dead()"(overrides?: CallOverrides): Promise<BigNumber>;

    domToken(overrides?: CallOverrides): Promise<BigNumber>;

    "domToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    index2User(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "index2User(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExists(_userAddr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isExists(address)"(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    levelList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "levelList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pToken(overrides?: CallOverrides): Promise<BigNumber>;

    "pToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    primaryAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "primaryAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    promote(_level: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "promote(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemPower(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemPower(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    referReward(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "referReward(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    register(_referrer: string, overrides?: Overrides): Promise<BigNumber>;

    "register(address)"(
      _referrer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDomToken(_domToken: string, overrides?: Overrides): Promise<BigNumber>;

    "setDomToken(address)"(
      _domToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setFactory(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setFactory(address,address)"(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setLevelRewardList(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setLevelRewardList(uint256,uint256[20])"(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMarketList(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMarketList(uint256[10])"(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<BigNumber>;

    setPToken(_pToken: string, overrides?: Overrides): Promise<BigNumber>;

    "setPToken(address)"(
      _pToken: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    usdtToken(overrides?: CallOverrides): Promise<BigNumber>;

    "usdtToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    userCount(overrides?: CallOverrides): Promise<BigNumber>;

    "userCount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    Users(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "Users(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    dead(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "dead()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    domToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    index2User(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "index2User(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExists(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isExists(address)"(
      _userAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    levelList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "levelList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    primaryAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "primaryAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    promote(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "promote(uint256)"(
      _level: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemPower(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemPower(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    referReward(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "referReward(address,uint256)"(
      _userAddr: string,
      _power: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    register(
      _referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "register(address)"(
      _referrer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDomToken(
      _domToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDomToken(address)"(
      _domToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setFactory(address,address)"(
      _factory: string,
      _usdtToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setLevelRewardList(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setLevelRewardList(uint256,uint256[20])"(
      _levelId: BigNumberish,
      _levelRewardList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMarketList(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMarketList(uint256[10])"(
      _marketList: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setPToken(
      _pToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setPToken(address)"(
      _pToken: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address,bool,bool)"(
      newOwner: string,
      direct: boolean,
      renounce: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    usdtToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "usdtToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "userCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
