{
  "address": "0x5BE3748695e5dC6a253966120caE616F07a007Df",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdt",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_dom",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_domsPerBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startBlock",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeOwner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "index",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "UpdateReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "index",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "WithdrawReward",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "APR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yopt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cic",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "_minWeight",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_proportions",
          "type": "uint256[3]"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "name": "bonusEndBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dead",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountT",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rid",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dom",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "domsPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeA",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeB",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getBalanceOfHash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "poolHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "teamHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amountA",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountB",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountR",
              "type": "uint256"
            }
          ],
          "internalType": "struct DomPool.DepositInfo",
          "name": "depositInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getMinWeight",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getMultiplier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "curHash",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "getProportions",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "inviter",
      "outputs": [
        {
          "internalType": "contract IInvite",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "migrate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_month",
          "type": "uint256"
        }
      ],
      "name": "mrate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "period",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_period",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "poolEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "domactul",
          "type": "uint256"
        }
      ],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_maxWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256[3]",
          "name": "_minWeight",
          "type": "uint256[3]"
        },
        {
          "internalType": "uint256[3]",
          "name": "_proportions",
          "type": "uint256[3]"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_domPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setDomPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeB",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_feeOwner",
          "type": "address"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IInvite",
          "name": "_inviter",
          "type": "address"
        }
      ],
      "name": "setInviter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTransferPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "direct",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "renounce",
          "type": "bool"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "updateReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdt",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerTokenPaid",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "yinit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_year",
          "type": "uint256"
        }
      ],
      "name": "yrate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdefbf1163820dc37c3ef78a3373818aeb92aa28274105a6e8a01c7a32a914462",
  "receipt": {
    "to": null,
    "from": "0xBc6339a0227DD17EB4a9941CCA2D2764c73310d8",
    "contractAddress": "0x5BE3748695e5dC6a253966120caE616F07a007Df",
    "transactionIndex": 1,
    "gasUsed": "3846827",
    "logsBloom": "0x
    "blockHash": "0x75595a8b14ea0791761a0e02f6e83a611ba70f94cb040b9e55fbb26ac9aee01c",
    "transactionHash": "0xdefbf1163820dc37c3ef78a3373818aeb92aa28274105a6e8a01c7a32a914462",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 10377383,
        "transactionHash": "0xdefbf1163820dc37c3ef78a3373818aeb92aa28274105a6e8a01c7a32a914462",
        "address": "0x5BE3748695e5dC6a253966120caE616F07a007Df",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bc6339a0227dd17eb4a9941cca2d2764c73310d8"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x75595a8b14ea0791761a0e02f6e83a611ba70f94cb040b9e55fbb26ac9aee01c"
      }
    ],
    "blockNumber": 10377383,
    "cumulativeGasUsed": "3978121",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x55d398326f99059fF775485246999027B3197955",
    "0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73",
    "0x15DDeb4F5A1b37001583DffE1aC420a0463517f9",
    "280211107060185180",
    "10349805",
    "0xBc6339a0227DD17EB4a9941CCA2D2764c73310d8"
  ],
  "solcInputHash": "e60763e8c2dcc87bacfac648f852c4e7",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_dom\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_domsPerBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startBlock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"UpdateReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"index\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"WithdrawReward\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"APR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yopt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cic\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_minWeight\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_proportions\",\"type\":\"uint256[3]\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"name\":\"bonusEndBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dead\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountT\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rid\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dom\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"domsPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeB\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceOfHash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"poolHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"teamHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountR\",\"type\":\"uint256\"}],\"internalType\":\"struct DomPool.DepositInfo\",\"name\":\"depositInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getMinWeight\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"curHash\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"getProportions\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inviter\",\"outputs\":[{\"internalType\":\"contract IInvite\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_month\",\"type\":\"uint256\"}],\"name\":\"mrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"period\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"poolEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"domactul\",\"type\":\"uint256\"}],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"_minWeight\",\"type\":\"uint256[3]\"},{\"internalType\":\"uint256[3]\",\"name\":\"_proportions\",\"type\":\"uint256[3]\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domPerBlock\",\"type\":\"uint256\"}],\"name\":\"setDomPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeB\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeOwner\",\"type\":\"address\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IInvite\",\"name\":\"_inviter\",\"type\":\"address\"}],\"name\":\"setInviter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTransferPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"updateReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenPaid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"yinit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_year\",\"type\":\"uint256\"}],\"name\":\"yrate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DomPool.sol\":\"DomPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/DomPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\npragma experimental ABIEncoderV2;\\r\\nimport \\\"./Ownable.sol\\\";\\r\\nimport \\\"./IInvite.sol\\\";\\r\\nimport \\\"./SafeERC20.sol\\\";\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./PriceLibrary.sol\\\";\\r\\n\\r\\ncontract DomPool is Ownable, ERC20 {\\r\\n\\r\\n    using SafeMath for  uint256;\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    constructor(\\r\\n        address _usdt, \\r\\n        address _factory, \\r\\n        IERC20 _dom,\\r\\n        uint256 _domsPerBlock,\\r\\n        uint256 _startBlock,\\r\\n        address _feeOwner\\r\\n    ) \\r\\n    public ERC20 (\\\"Dom HashRate\\\",\\\"DHR\\\")\\r\\n    {\\r\\n        usdt = _usdt;\\r\\n        factory = _factory;\\r\\n        dom = _dom;\\r\\n        domsPerBlock = _domsPerBlock;\\r\\n        startBlock = _startBlock;\\r\\n        lastUpdateBlock = _startBlock;\\r\\n        feeOwner = _feeOwner;\\r\\n        initRate();\\r\\n    }\\r\\n\\r\\n    struct DepositInfo {\\r\\n        uint256 amountA;\\r\\n        uint256 amountB;\\r\\n        uint256 amountR;\\r\\n    }\\r\\n\\r\\n    struct User {\\r\\n        uint256 rewardPerTokenPaid;\\r\\n        mapping(uint=>DepositInfo) deposits;\\r\\n    }\\r\\n\\r\\n    struct Pool {\\r\\n        IERC20 tokenA;\\r\\n        IERC20 tokenB; \\r\\n        bool status;\\r\\n        uint256 maxWeight;\\r\\n        uint256 totalAmount;\\r\\n        uint256[3] minWeight;\\r\\n        uint256[3] proportions;\\r\\n    }\\r\\n\\r\\n    // The block number when doms mining starts.\\r\\n    uint256 public startBlock;\\r\\n    \\r\\n    uint256 public feeA = 100;\\r\\n    uint256 public feeB = 100;\\r\\n    address public feeOwner;\\r\\n    \\r\\n    uint256 internal DIVISOR = 100;\\r\\n    uint256 internal BASE_INIT = 1000000;\\r\\n    uint256 internal BASE_RATE = 5;\\r\\n\\r\\n    uint256 constant internal REDUCE_PERIOD = 864000;\\r\\n    uint256 constant internal THRESHOLD = 5000000 * 1e18 ;\\r\\n    uint256 public lastUpdateBlock;\\r\\n    uint256 public rewardPerTokenStored;\\r\\n\\r\\n    bool public paused = false;\\r\\n    bool public transferPaused = true;\\r\\n    // dom tokens created per block.\\r\\n    uint256 public domsPerBlock;\\r\\n\\r\\n    address public factory;\\r\\n    address public dead = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    address public usdt;\\r\\n    IERC20  public dom;\\r\\n\\r\\n    IInvite public inviter;\\r\\n\\r\\n\\r\\n    Pool[] public pools;\\r\\n    mapping( uint => uint) public yinit;\\r\\n    //uint[3] public proportions = [80,70,50];\\r\\n\\r\\n    mapping(address => uint256) public rewards;\\r\\n    mapping(address => User) public users;\\r\\n\\r\\n    event Deposit(address indexed,uint,uint,uint,uint);\\r\\n    event Withdraw(address indexed,uint,uint,uint,uint);\\r\\n    event WithdrawReward(address index, uint );\\r\\n    event UpdateReward(address index,uint);\\r\\n\\r\\n    modifier notPause() {\\r\\n        require(paused == false, \\\"Mining has been suspended\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier transferNotPause() {\\r\\n        require(paused == false, \\\"Mining has been suspended\\\");\\r\\n        _;\\r\\n    }\\r\\n \\r\\n    function initRate() internal {\\r\\n        uint curRate = BASE_INIT;\\r\\n        uint base = 100**11;\\r\\n        for(uint i = 0; i<17; i++) {\\r\\n            yinit[i] = curRate;\\r\\n            uint _yrate = yrate(i);\\r\\n            uint _yLast = curRate.mul(\\r\\n                _yrate**11\\r\\n            )/base;\\r\\n            curRate = _yLast.mul(yrate(i+1))/100;\\r\\n        }\\r\\n\\r\\n    }\\r\\n\\r\\n    function yrate(uint _year) public view returns(uint256) {\\r\\n        uint rate;\\r\\n        \\r\\n        if(_year>=BASE_RATE) {\\r\\n            rate = 1;\\r\\n        }else{\\r\\n            rate = BASE_RATE-_year;\\r\\n        }\\r\\n\\r\\n        return 100 - rate;\\r\\n    }\\r\\n\\r\\n    function mrate(uint _month) public view returns (uint) {\\r\\n        uint _year = _month/12;\\r\\n        uint _yinitRate = yinit[_year];\\r\\n        uint _yrate = yrate(_year);\\r\\n        uint _mi = _month%12;\\r\\n        return _yinitRate.mul(_yrate**_mi)/(100**_mi);\\r\\n    }\\r\\n\\r\\n    function mint(address _to, uint256 _amount) external override returns(bool) {\\r\\n        require(msg.sender == address(inviter), \\\"forbidden operate\\\");\\r\\n        _mint(_to,_amount);\\r\\n    }\\r\\n\\r\\n    function burn(address _to,uint _amount) public override {\\r\\n        require(msg.sender == address(inviter), \\\"forbidden operate\\\");\\r\\n        _burn(_to,_amount);\\r\\n    }\\r\\n\\r\\n    function setPause() public onlyOwner {\\r\\n        paused = !paused;\\r\\n    }\\r\\n\\r\\n    function setTransferPause() public onlyOwner {\\r\\n        transferPaused = !transferPaused;\\r\\n    }\\r\\n\\r\\n    function setInviter(IInvite _inviter) public onlyOwner {\\r\\n        inviter = _inviter;\\r\\n    }\\r\\n\\r\\n    function setDomPerBlock(uint _domPerBlock) public onlyOwner {\\r\\n        updateReward(address(0));\\r\\n        domsPerBlock = _domPerBlock;\\r\\n    }\\r\\n\\r\\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\\r\\n    function migrate(address token,address _to) public onlyOwner {\\r\\n       IERC20 _token = IERC20(token);\\r\\n       uint bal = _token.balanceOf(address(this));\\r\\n       _token.transfer(_to, bal);\\r\\n    }\\r\\n\\r\\n     function add(\\r\\n        IERC20 _tokenA,\\r\\n        IERC20 _tokenB,\\r\\n        uint256 _maxWeight,\\r\\n        uint256[3] memory _minWeight,\\r\\n        uint256[3] memory _proportions\\r\\n    ) public onlyOwner {    \\r\\n        pools.push(\\r\\n            Pool({\\r\\n                tokenA: _tokenA,\\r\\n                tokenB: _tokenB,\\r\\n                status: true,\\r\\n                totalAmount: 0,\\r\\n                maxWeight: _maxWeight,\\r\\n                minWeight: _minWeight,\\r\\n                proportions: _proportions\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n     function set(\\r\\n        uint256 _pid,\\r\\n        bool _status,\\r\\n        uint256 _maxWeight,\\r\\n        uint256[3] memory _minWeight,\\r\\n        uint256[3] memory _proportions\\r\\n    ) public onlyOwner {\\r\\n        pools[_pid].status = _status;\\r\\n        pools[_pid].maxWeight = _maxWeight;\\r\\n        pools[_pid].minWeight = _minWeight;\\r\\n        pools[_pid].proportions = _proportions;\\r\\n    }\\r\\n    \\r\\n    function setFee(uint _feeA,uint _feeB,address _feeOwner) public onlyOwner {\\r\\n        feeA = _feeA;\\r\\n        feeB = _feeB;\\r\\n        feeOwner = _feeOwner;\\r\\n    }\\r\\n\\r\\n    function updateAndMint() internal returns( uint domincr, uint domactul, uint burned ) {\\r\\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\\r\\n        domincr = multiplier.mul(domsPerBlock).div(BASE_INIT);\\r\\n        //bool _minted = dom.mint(address(this), domincr);\\r\\n        //if(_minted){\\r\\n        domactul = domincr.mul(curHash).div(THRESHOLD);\\r\\n        burned = domincr.sub(domactul);\\r\\n        if(burned>0) dom.safeTransfer(dead,burned);\\r\\n        //}\\r\\n    }\\r\\n\\r\\n    function updateReward(address account) public returns(uint256) {\\r\\n        require(block.number>startBlock,\\\"not start\\\");\\r\\n        ( , uint domactul, ) = updateAndMint();\\r\\n        rewardPerTokenStored = rewardPerToken(domactul);\\r\\n        lastUpdateBlock = block.number;\\r\\n        if (account != address(0)) {\\r\\n            rewards[account] = \\r\\n                balanceOf(account)\\r\\n                .mul(\\r\\n                    rewardPerTokenStored.sub(users[account].rewardPerTokenPaid)\\r\\n                )\\r\\n                .div(1e18)\\r\\n                .add(rewards[account]);\\r\\n\\r\\n            users[account].rewardPerTokenPaid = rewardPerTokenStored;\\r\\n        }\\r\\n        emit UpdateReward(account, rewards[account]);\\r\\n    }\\r\\n\\r\\n    function rewardPerToken(uint domactul) public view returns(uint256) {\\r\\n        if (totalSupply() == 0) {\\r\\n            return rewardPerTokenStored;\\r\\n        }\\r\\n        return rewardPerTokenStored.add(\\r\\n            domactul.mul(1e18).div(totalSupply())\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function earned(address account) public view returns (uint256) {\\r\\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\\r\\n        uint domactul = multiplier.mul(domsPerBlock).mul(curHash).div(THRESHOLD).div(BASE_INIT);\\r\\n        return\\r\\n            balanceOf(account)\\r\\n                .mul(\\r\\n                    rewardPerToken(domactul).sub(users[account].rewardPerTokenPaid)\\r\\n                )\\r\\n                .div(1e18)\\r\\n                .add(rewards[account]);\\r\\n    }\\r\\n\\r\\n    function poolEarned(address account, uint _pid) public view returns (uint256) {\\r\\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\\r\\n        uint domactul = multiplier.mul(domsPerBlock).mul(curHash).div(THRESHOLD).div(BASE_INIT);\\r\\n        uint _balance = users[account].deposits[_pid].amountR;\\r\\n        return\\r\\n            _balance\\r\\n                .mul(\\r\\n                    rewardPerToken(domactul).sub(users[account].rewardPerTokenPaid)\\r\\n                )\\r\\n                .div(1e18);\\r\\n    }\\r\\n\\r\\n    function APR(uint _pid) public view returns(uint yopt, uint cic) {\\r\\n        (uint unitDom,uint256 priceDom) = PriceLibrary.price(factory,address(dom),usdt);\\r\\n        Pool storage pool = pools[_pid];\\r\\n        yopt = (28800*365*domsPerBlock)*priceDom*pool.maxWeight*(pool.minWeight[2])/10000/unitDom;\\r\\n        cic = pool.totalAmount;\\r\\n        uint _totalSupply = totalSupply();\\r\\n        yopt = _totalSupply==0?0:yopt*cic/_totalSupply;\\r\\n    }\\r\\n    \\r\\n    function deposit(uint256 _pid, uint256 _amountT, uint256 _rid) public notPause {\\r\\n        Pool storage pool = pools[_pid];\\r\\n        require(pool.status,\\\"closed\\\");\\r\\n        updateReward(msg.sender);\\r\\n\\r\\n         uint _amountA;\\r\\n         uint _amountB;\\r\\n         uint _amountR;\\r\\n         \\r\\n        \\r\\n        ( _amountA, _amountB,_amountR) = transferAmount(pool,_rid,_amountT);\\r\\n        \\r\\n        \\r\\n        if(address(inviter)!=address(0)) inviter.referReward(msg.sender,_amountR);\\r\\n\\r\\n        users[msg.sender].deposits[_pid].amountA = users[msg.sender].deposits[_pid].amountA.add(_amountA);\\r\\n        users[msg.sender].deposits[_pid].amountB = users[msg.sender].deposits[_pid].amountB.add(_amountB);\\r\\n        users[msg.sender].deposits[_pid].amountR = users[msg.sender].deposits[_pid].amountR.add(_amountR);\\r\\n\\r\\n        pool.totalAmount = pool.totalAmount.add(_amountR);\\r\\n\\r\\n        _mint(msg.sender,_amountR);\\r\\n\\r\\n        emit Deposit(msg.sender,_pid,_amountA,_amountB, _amountR);\\r\\n\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function transferAmount(Pool storage pool,uint256 _rid,uint256 _amountT ) internal returns(uint256 _amountA,uint256 _amountB,uint256 _amountR) {\\r\\n        \\r\\n        (uint unitA,uint256 priceA) = PriceLibrary.price(factory,address(pool.tokenA),usdt);\\r\\n        (uint unitB,uint256 priceB) = PriceLibrary.price(factory,address(pool.tokenB),usdt);    \\r\\n            \\r\\n        _amountA = _amountT.mul(unitA).mul(pool.proportions[_rid]).div(priceA)/DIVISOR;\\r\\n        _amountB = _amountT.mul(unitB).mul(uint(100).sub(pool.proportions[_rid])).div(priceB)/DIVISOR;\\r\\n        \\r\\n        pool.tokenA.safeTransferFrom(msg.sender,address(this),_amountA);\\r\\n        pool.tokenB.safeTransferFrom(msg.sender,address(this),_amountB); \\r\\n\\r\\n        require(priceA!=0&&priceB!=0,\\\"Invalid price\\\");\\r\\n        _amountR = _amountT*pool.maxWeight*pool.minWeight[_rid]/10000;\\r\\n    }\\r\\n\\r\\n    function withdraw(uint256 _pid) public notPause {\\r\\n        withdrawReward();\\r\\n        User storage user = users[msg.sender];\\r\\n        uint256 amountA = user.deposits[_pid].amountA;\\r\\n        uint256 amountB = user.deposits[_pid].amountB;\\r\\n        uint256 amountR = user.deposits[_pid].amountR;\\r\\n\\r\\n\\r\\n        user.deposits[_pid].amountA = 0;\\r\\n        user.deposits[_pid].amountB = 0;\\r\\n        user.deposits[_pid].amountR = 0;\\r\\n        Pool storage pool = pools[_pid];\\r\\n        pool.totalAmount = pool.totalAmount>amountR?pool.totalAmount-amountR:0;\\r\\n        if(address(inviter)!=address(0)) inviter.redeemPower(msg.sender,amountR);\\r\\n        \\r\\n        uint256 amountFeeA = amountA.mul(feeA)/10000;\\r\\n        uint256 amountFeeB = amountB.mul(feeB)/10000;\\r\\n\\r\\n        pool.tokenA.safeTransfer(msg.sender, amountA.sub(amountFeeA));\\r\\n        pool.tokenB.safeTransfer(msg.sender, amountB.sub(amountFeeB));\\r\\n        \\r\\n        transferFee(pool.tokenA,amountFeeA);\\r\\n        transferFee(pool.tokenB,amountFeeB);\\r\\n        \\r\\n        _burn(msg.sender, amountR);\\r\\n\\r\\n        emit Withdraw(msg.sender,_pid,amountA,amountB,amountR);\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function transferFee(IERC20 token,uint256 fee) internal {\\r\\n        if(address(token)==address(dom)) {\\r\\n            token.safeTransfer(dead,fee);\\r\\n        }else{\\r\\n            token.safeTransfer(feeOwner,fee);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function withdrawReward() public  {\\r\\n        updateReward(msg.sender);\\r\\n        uint256 reward = rewards[msg.sender];\\r\\n        if (reward > 0) {\\r\\n            rewards[msg.sender] = 0;\\r\\n            safeDomTransfer(msg.sender,reward);\\r\\n        }\\r\\n\\r\\n        emit WithdrawReward(msg.sender,reward);\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw(uint256 _pid) public notPause {\\r\\n        User storage user = users[msg.sender];\\r\\n        uint256 amountA = user.deposits[_pid].amountA;\\r\\n        uint256 amountB = user.deposits[_pid].amountB;\\r\\n        uint256 amountR = user.deposits[_pid].amountR;\\r\\n        user.deposits[_pid].amountA = 0;\\r\\n        user.deposits[_pid].amountB = 0;\\r\\n        user.deposits[_pid].amountR = 0;\\r\\n        Pool storage pool = pools[_pid];\\r\\n        pool.totalAmount = pool.totalAmount>amountR?pool.totalAmount-amountR:0;\\r\\n        if(address(inviter)!=address(0)) inviter.redeemPower(msg.sender,amountR);\\r\\n        uint256 amountFeeA = amountA.mul(feeA)/10000;\\r\\n        uint256 amountFeeB = amountB.mul(feeB)/10000;\\r\\n\\r\\n        pool.tokenA.safeTransfer(msg.sender, amountA.sub(amountFeeA));\\r\\n        pool.tokenB.safeTransfer(msg.sender, amountB.sub(amountFeeB));\\r\\n        \\r\\n        transferFee(pool.tokenA,amountFeeA);\\r\\n        transferFee(pool.tokenB,amountFeeB);\\r\\n        _burn(msg.sender, amountR);\\r\\n         rewards[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    // Return reward multiplier over the given _from to _to block.\\r\\n    function getMultiplier(uint256 _from, uint256 _to)\\r\\n        public\\r\\n        view\\r\\n        returns (uint256 multiplier,uint256 curHash)\\r\\n    {\\r\\n\\r\\n        uint fromPeriod = period(_from);\\r\\n        uint toPeriod   = period(_to);\\r\\n        uint _startBlock = _from;\\r\\n        \\r\\n        for(;fromPeriod<=toPeriod;fromPeriod++){\\r\\n            uint _endBlock = bonusEndBlock(fromPeriod);\\r\\n            if(_to<_endBlock) _endBlock = _to;\\r\\n            multiplier = multiplier.add(\\r\\n                _endBlock.sub(_startBlock).mul(mrate(fromPeriod))\\r\\n            );\\r\\n            _startBlock = _endBlock;\\r\\n        }\\r\\n\\r\\n        curHash = totalSupply();\\r\\n        if(curHash>THRESHOLD){\\r\\n            curHash = THRESHOLD;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDeposit(address account,uint pid) public view returns(DepositInfo memory depositInfo) {\\r\\n        return users[account].deposits[pid];\\r\\n    }\\r\\n\\r\\n    function getMinWeight(uint _pid) public view returns(uint[3] memory) {\\r\\n        return pools[_pid].minWeight;\\r\\n    }\\r\\n\\r\\n    function getProportions(uint _pid) public view returns(uint[3] memory) {\\r\\n        return pools[_pid].proportions;\\r\\n    }\\r\\n\\r\\n    function getPrice(address tokenA,address tokenB) public view returns(uint,uint) {\\r\\n        return PriceLibrary.price(factory, tokenA, tokenB);\\r\\n    }\\r\\n\\r\\n    function getBalanceOfHash(address account) public view returns(uint poolHash,uint teamHash) {\\r\\n            for(uint i = 0;i<pools.length;i++) {\\r\\n                poolHash = poolHash.add(users[account].deposits[i].amountR);\\r\\n            }\\r\\n            teamHash = balanceOf(account).sub(poolHash);\\r\\n    }\\r\\n\\r\\n\\r\\n    function bonusEndBlock(uint256 _period) public view returns (uint) {\\r\\n        return startBlock.mul(_period+1).mul(REDUCE_PERIOD);\\r\\n    }\\r\\n\\r\\n    function period(uint256 blockNumber) public view returns (uint _period) {\\r\\n        if(blockNumber>startBlock) {\\r\\n            _period = (blockNumber-startBlock)/REDUCE_PERIOD;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function poolLength() public view returns (uint256) {\\r\\n        return pools.length;\\r\\n    }\\r\\n\\r\\n    // Safe Bats transfer function, just in case if rounding error causes pool to not have enough Batss.\\r\\n    function safeDomTransfer(address _to, uint256 _amount) internal {\\r\\n        uint256 domBal = dom.balanceOf(address(this));\\r\\n        if (_amount > domBal) {\\r\\n            dom.transfer(_to, domBal);\\r\\n        } else {\\r\\n            dom.transfer(_to, _amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 ) internal transferNotPause override virtual {\\r\\n        if(from!=address(this)&&from!=address(inviter)) {\\r\\n            updateReward(from);\\r\\n        }\\r\\n        if(to!=address(this)&&to!=address(inviter)) {\\r\\n            updateReward(to);\\r\\n        }\\r\\n     }\\r\\n\\r\\n}\",\"keccak256\":\"0xa5707d0c4a5d961b3d6f1f6eab830f16b718a65a81094d4381b739ebd5675256\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity >=0.6.0 <0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address payable) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes memory) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\r\\n * of returning `false` on failure. This behavior is nonetheless conventional\\r\\n * and does not conflict with the expectations of ERC20 applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\nabstract contract ERC20 is Context, IERC20 {\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint8 private _decimals;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\r\\n     * a default value of 18.\\r\\n     *\\r\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\r\\n     *\\r\\n     * All three of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor (string memory name_, string memory symbol_) public {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _decimals = 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view override virtual returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view override virtual returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\r\\n     * called.\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view override virtual returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` and `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\r\\n     *\\r\\n     * This is internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `sender` cannot be the zero address.\\r\\n     * - `recipient` cannot be the zero address.\\r\\n     * - `sender` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n\\r\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        _balances[recipient] = _balances[recipient].add(amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply = _totalSupply.add(amount);\\r\\n        _balances[account] = _balances[account].add(amount);\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _totalSupply = _totalSupply.sub(amount);\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\r\\n     *\\r\\n     * WARNING: This function should only be called from the constructor. Most\\r\\n     * applications that interact with token contracts will not expect\\r\\n     * {decimals} to ever change, and may work incorrectly if it does.\\r\\n     */\\r\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\r\\n        _decimals = decimals_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be to transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n}\\r\\n\",\"keccak256\":\"0xeba58d9cb41bf610dd2d74ebed973615dd673d89f2f589475a845bf66f4caf31\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n    function mint(address to, uint256 amount) external returns (bool);\\r\\n    function burn(address to, uint256 amount) external;\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5156df52d081edfc8dab16d5d6fc44a33880f8e97da3fd857cd082d480b0acd\",\"license\":\"MIT\"},\"contracts/IInvite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\ninterface IInvite {\\r\\n    // referring reward for different level\\r\\n    function referReward(address _userAddr, uint256 _power) external;\\r\\n    // redeem power for diffrent level\\r\\n    function redeemPower(address _userAddr, uint256 _power) external;\\r\\n}\",\"keccak256\":\"0x500690c4a7021ceae7d83fc20e36593c2e1aed5d1940c5ff270a9336921fcece\",\"license\":\"MIT\"},\"contracts/IPancakeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.0;\\r\\ninterface IPancakeFactory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\\r\\n\\r\\ninterface IPancakePair {\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function name() external pure returns (string memory);\\r\\n    function symbol() external pure returns (string memory);\\r\\n    function decimals() external pure returns (uint8);\\r\\n    function totalSupply() external view returns (uint);\\r\\n    function balanceOf(address owner) external view returns (uint);\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function approve(address spender, uint value) external returns (bool);\\r\\n    function transfer(address to, uint value) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\r\\n\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\r\\n    function nonces(address owner) external view returns (uint);\\r\\n\\r\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\r\\n\\r\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\r\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\r\\n    event Swap(\\r\\n        address indexed sender,\\r\\n        uint amount0In,\\r\\n        uint amount1In,\\r\\n        uint amount0Out,\\r\\n        uint amount1Out,\\r\\n        address indexed to\\r\\n    );\\r\\n    event Sync(uint112 reserve0, uint112 reserve1);\\r\\n\\r\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\r\\n    function factory() external view returns (address);\\r\\n    function token0() external view returns (address);\\r\\n    function token1() external view returns (address);\\r\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\r\\n    function price0CumulativeLast() external view returns (uint);\\r\\n    function price1CumulativeLast() external view returns (uint);\\r\\n    function kLast() external view returns (uint);\\r\\n\\r\\n    function mint(address to) external returns (uint liquidity);\\r\\n    function burn(address to) external returns (uint amount0, uint amount1);\\r\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\r\\n    function skim(address to) external;\\r\\n    function sync() external;\\r\\n\\r\\n    function initialize(address, address) external;\\r\\n}\",\"keccak256\":\"0xb795094d9e575fe6b392505a901dbef536982a0a9993498b28b24ad15bbe639e\",\"license\":\"MIT\"},\"contracts/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\ncontract OwnableData {\\r\\n    // V1 - V5: OK\\r\\n    address public owner;\\r\\n    // V1 - V5: OK\\r\\n    address public pendingOwner;\\r\\n}\\r\\n// T1 - T4: OK\\r\\ncontract Ownable is OwnableData {\\r\\n    // E1: OK\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () public {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), msg.sender);\\r\\n    }\\r\\n\\r\\n    // F1 - F9: OK\\r\\n    // C1 - C21: OK\\r\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\r\\n        if (direct) {\\r\\n            // Checks\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            // Effects\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n            pendingOwner = address(0);\\r\\n        } else {\\r\\n            // Effects\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // F1 - F9: OK\\r\\n    // C1 - C21: OK\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n        \\r\\n        // Checks\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        // Effects\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    // M1 - M5: OK\\r\\n    // C1 - C21: OK\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x242ef02a38e6917c2cc4982b38a7ab066f127f6a1c6f47968b0cf4f887f0fbdd\",\"license\":\"MIT\"},\"contracts/PriceLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\nimport \\\"./SafeMath.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IPancakeFactory.sol\\\";\\r\\n\\r\\nlibrary PriceLibrary {\\r\\n\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function price(address _factory, address _from, address _to) public view returns(uint inAmount,uint outAmount) { \\r\\n        inAmount = unit(_from);\\r\\n        if(_from==_to){\\r\\n            return (inAmount,inAmount);\\r\\n        }\\r\\n        \\r\\n        address _pair = IPancakeFactory(_factory).getPair(_from, _to);\\r\\n        \\r\\n        if(_pair!=address(0)){\\r\\n            IPancakePair pair = IPancakePair(_pair);\\r\\n            (uint112 ureserve0, uint112 ureserve1,) = pair.getReserves();\\r\\n            address token1 = pair.token1();\\r\\n            if(token1!=address(_to)){\\r\\n                ( ureserve0,  ureserve1) = (ureserve1, ureserve0);\\r\\n            }\\r\\n            outAmount = getAmountOut(inAmount, ureserve0, ureserve1);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unit(address token) public view returns(uint) {\\r\\n        uint _decimals = IERC20(token).decimals();\\r\\n        return 10**_decimals;\\r\\n    }\\r\\n\\r\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\r\\n        require(amountIn > 0, 'PankSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\\r\\n        require(reserveIn > 0 && reserveOut > 0, 'PankSwapLibrary: INSUFFICIENT_LIQUIDITY');\\r\\n        amountOut = amountIn*reserveOut/reserveIn;\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0xcde018cdfabe9c99324c429c6b8eaa8c5b92411fa21c5957d66a3e0486e3c5da\",\"license\":\"MIT\"},\"contracts/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nimport './SafeMath.sol';\\r\\nimport './IERC20.sol';\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\r\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    \\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves.\\r\\n\\r\\n        // A Solidity high level call has three parts:\\r\\n        //  1. The target address is checked to verify it contains contract code\\r\\n        //  2. The call itself is made, and success asserted\\r\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require(Address.isContract(address(token)), \\\"SafeERC20: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\r\\n\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x114923e9027379cb2d6a81b48887b7faea20aef21076b9cbb27d5f9c1d5be042\",\"license\":\"MIT\"},\"contracts/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.6.8;\\r\\n\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Subtraction cannot overflow.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n        // benefit is lost if 'b' is also tested.\\r\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        // Solidity only automatically asserts when dividing by 0\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * Reverts with custom message when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     * - The divisor cannot be zero.\\r\\n     *\\r\\n     * _Available since v2.4.0._\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b != 0, errorMessage);\\r\\n        return a % b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2d457838c3d6e7086dd9430900b8696da8ab2c9e55d428db5b76430c88b3d08a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103c35760003560e01c80636cdbdb95116101ff578063b9818be11161011a578063d4b08aee116100ad578063e30c39781161007c578063e30c3978146107bc578063f606abe3146107c4578063fb2cb34e146107cc578063fdf8211f146107d4576103c3565b8063d4b08aee1461077b578063dd62ed3e1461078e578063df136d65146107a1578063e2f72829146107a9576103c3565b8063c9f704fb116100e9578063c9f704fb1461073a578063d3190d9e1461074d578063d3316cdb14610760578063d431b1ac14610773576103c3565b8063b9818be11461070f578063ba0daae314610717578063c45a01551461072a578063c885bc5814610732576103c3565b8063a218141b11610192578063a9059cbb11610161578063a9059cbb146106b2578063ac41865a146106c5578063ac4afa38146106d8578063b7370f94146106fc576103c3565b8063a218141b14610671578063a411e52c14610679578063a457c2d71461068c578063a87430ba1461069f576103c3565b80638dbb1e3a116101ce5780638dbb1e3a1461062257806395d89b411461064357806396d9b4091461064b5780639dc29fac1461065e576103c3565b80636cdbdb95146105ec57806370a08231146105f4578063874c120b146106075780638da5cb5b1461061a576103c3565b80632726b506116102ef57806348cd4cb1116102825780635312ea8e116102515780635312ea8e1461059e578063550d5000146105b15780635c975abb146105d1578063632447c9146105d9576103c3565b806348cd4cb1146105735780634e71e0c81461057b5780634ef7c86114610583578063503676d41461058b576103c3565b8063313ce567116102be578063313ce5671461053057806336cf7c8714610545578063395093511461054d57806340c10f1914610560576103c3565b80632726b506146104ed5780632e1a7d4d1461050d5780632ee60581146105205780632f48ab7d14610528576103c3565b8063095ea7b31161036757806315c383db1161033657806315c383db146104b757806315e64d6d146104bf57806318160ddd146104d257806323b872dd146104da576103c3565b8063095ea7b31461045c5780630ca296a71461047c5780631068361f1461048f5780631493161c146104a2576103c3565b806306fdde03116103a357806306fdde03146104195780630700037d1461042e578063078dfbe714610441578063081e3eda14610454576103c3565b80628cc262146103c8578062aeef8a146103f157806301f11a6914610406575b600080fd5b6103db6103d6366004612d53565b6107e7565b6040516103e89190613533565b60405180910390f35b6104046103ff366004612fa7565b6108a3565b005b610404610414366004612f0c565b610acf565b610421610bb5565b6040516103e891906130c6565b6103db61043c366004612d53565b610c4b565b61040461044f366004612de7565b610c5d565b6103db610d43565b61046f61046a366004612e31565b610d49565b6040516103e8919061308a565b61040461048a366004612e78565b610d67565b61040461049d366004612d6f565b610f0e565b6104aa611043565b6040516103e89190612fee565b6103db611052565b6103db6104cd366004612edc565b611058565b6103db6110a1565b61046f6104e8366004612da7565b6110a7565b6105006104fb366004612e31565b61112e565b6040516103e89190613512565b61040461051b366004612edc565b611184565b6103db6113b2565b6104aa6113b8565b6105386113c7565b6040516103e89190613565565b6104aa6113d0565b61046f61055b366004612e31565b6113df565b61046f61056e366004612e31565b61142d565b6103db611464565b61040461146a565b6104aa6114f7565b6103db610599366004612edc565b611506565b6104046105ac366004612edc565b611527565b6105c46105bf366004612edc565b6116ef565b6040516103e89190613062565b61046f61174a565b6103db6105e7366004612d53565b611753565b610404611879565b6103db610602366004612d53565b6118c0565b6103db610615366004612edc565b6118db565b6104aa61191b565b610635610630366004612f36565b61192a565b6040516103e892919061353c565b6104216119cd565b6105c4610659366004612edc565b611a2e565b61040461066c366004612e31565b611a89565b6103db611ac1565b610404610687366004612edc565b611ac7565b61046f61069a366004612e31565b611b01565b6103db6106ad366004612d53565b611b69565b61046f6106c0366004612e31565b611b7b565b6106356106d3366004612d6f565b611b8f565b6106eb6106e6366004612edc565b611c34565b6040516103e8959493929190613095565b6103db61070a366004612edc565b611c83565b6104aa611c95565b610404610725366004612f7a565b611ca4565b6104aa611cf8565b610404611d07565b610635610748366004612d53565b611d7d565b6103db61075b366004612edc565b611de1565b61063561076e366004612edc565b611e06565b610404611f42565b6103db610789366004612edc565b611f80565b6103db61079c366004612d6f565b611fa3565b6103db611fce565b6104046107b7366004612d53565b611fd4565b6104aa612020565b6103db61202f565b61046f612035565b6103db6107e2366004612e31565b612043565b60008060006107f8600f544361192a565b915091506000610838600d546108326a0422ca8b0a00a4250000006108328661082c6012548a6120ee90919063ffffffff16565b906120ee565b9061212f565b6001600160a01b0386166000908152601a6020908152604080832054601b909252909120549192506108989161089290670de0b6b3a7640000906108329061088990610883886118db565b90612171565b61082c8b6118c0565b906121b3565b93505050505b919050565b60115460ff16156108cf5760405162461bcd60e51b81526004016108c69061315f565b60405180910390fd5b6000601884815481106108de57fe5b90600052602060002090600a020190508060010160149054906101000a900460ff1661091c5760405162461bcd60e51b81526004016108c690613273565b61092533611753565b5060008060006109368486886121d8565b60175492955090935091506001600160a01b0316156109b4576017546040516308e4af9b60e31b81526001600160a01b03909116906347257cd8906109819033908590600401613002565b600060405180830381600087803b15801561099b57600080fd5b505af11580156109af573d6000803e3d6000fd5b505050505b336000908152601b602090815260408083208a84526001019091529020546109dc90846121b3565b336000908152601b602090815260408083208b845260019081019092529091209182550154610a0b90836121b3565b336000908152601b602090815260408083208b845260019081019092529091209081019190915560020154610a4090826121b3565b336000908152601b602090815260408083208b84526001019091529020600201556003840154610a7090826121b3565b6003850155610a7f338261242e565b336001600160a01b03167f7162984403f6c73c8639375d45a9187dfd04602231bd8e587c415718b5f7e5f988858585604051610abe949392919061354a565b60405180910390a250505050505050565b6000546001600160a01b03163314610af95760405162461bcd60e51b81526004016108c6906132ff565b8360188681548110610b0757fe5b90600052602060002090600a020160010160146101000a81548160ff0219169083151502179055508260188681548110610b3d57fe5b90600052602060002090600a0201600201819055508160188681548110610b6057fe5b90600052602060002090600a0201600401906003610b7f929190612c50565b508060188681548110610b8e57fe5b90600052602060002090600a0201600701906003610bad929190612c50565b505050505050565b60058054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c415780601f10610c1657610100808354040283529160200191610c41565b820191906000526020600020905b815481529060010190602001808311610c2457829003601f168201915b5050505050905090565b601a6020526000908152604090205481565b6000546001600160a01b03163314610c875760405162461bcd60e51b81526004016108c6906132ff565b8115610d22576001600160a01b038316151580610ca15750805b610cbd5760405162461bcd60e51b81526004016108c690613244565b600080546040516001600160a01b03808716939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0385166001600160a01b031991821617909155600180549091169055610d3e565b600180546001600160a01b0319166001600160a01b0385161790555b505050565b60185490565b6000610d5d610d566124ee565b84846124f2565b5060015b92915050565b6000546001600160a01b03163314610d915760405162461bcd60e51b81526004016108c6906132ff565b6040805160e0810182526001600160a01b0380881682528681166020830190815260019383018481526060840188815260006080860181815260a087018a815260c088018a905260188054998a0181559092528651600a9098027fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e810180549988166001600160a01b03199a8b1617815595517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2f8201805496511515600160a01b0260ff60a01b199290991696909a16959095179490941695909517909655517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d3082015591517fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d318301559251919291610eee917fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d3201906003612c50565b5060c0820151610f049060078301906003612c50565b5050505050505050565b6000546001600160a01b03163314610f385760405162461bcd60e51b81526004016108c6906132ff565b6040516370a0823160e01b815282906000906001600160a01b038316906370a0823190610f69903090600401612fee565b60206040518083038186803b158015610f8157600080fd5b505afa158015610f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb99190612ef4565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb90610fea9086908590600401613002565b602060405180830381600087803b15801561100457600080fd5b505af1158015611018573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103c9190612e5c565b5050505050565b6016546001600160a01b031681565b60095481565b600c81046000818152601960205260408120549091908261107883611de1565b9050600c8506606481900a61108f8483850a6120ee565b8161109657fe5b049695505050505050565b60045490565b60006110b48484846125a6565b611124846110c06124ee565b61111f8560405180606001604052806028815260200161360e602891396001600160a01b038a166000908152600360205260408120906110fe6124ee565b6001600160a01b0316815260208101919091526040016000205491906126bb565b6124f2565b5060019392505050565b611136612c8e565b506001600160a01b03919091166000908152601b6020908152604080832093835260019384018252918290208251606081018452815481529381015491840191909152600201549082015290565b60115460ff16156111a75760405162461bcd60e51b81526004016108c69061315f565b6111af611d07565b336000908152601b602090815260408083208484526001808201909352908320805492810180546002830180549387905591869055908590556018805493959193879081106111fa57fe5b90600052602060002090600a020190508181600301541161121c576000611224565b818160030154035b60038201556017546001600160a01b03161561129f5760175460405163fe8f376960e01b81526001600160a01b039091169063fe8f37699061126c9033908690600401613002565b600060405180830381600087803b15801561128657600080fd5b505af115801561129a573d6000803e3d6000fd5b505050505b60006127106112b9600954876120ee90919063ffffffff16565b816112c057fe5b04905060006127106112dd600a54876120ee90919063ffffffff16565b816112e457fe5b049050611307336112f58885612171565b85546001600160a01b031691906126e7565b61132a336113158784612171565b60018601546001600160a01b031691906126e7565b825461133f906001600160a01b03168361273d565b6001830154611357906001600160a01b03168261273d565b611361338561278c565b336001600160a01b03167fe08737ac48a1dab4b1a46c7dc9398bd5bfc6d7ad6fabb7cd8caa254de14def35898888886040516113a0949392919061354a565b60405180910390a25050505050505050565b60125481565b6015546001600160a01b031681565b60075460ff1690565b6014546001600160a01b031681565b6000610d5d6113ec6124ee565b8461111f85600360006113fd6124ee565b6001600160a01b03908116825260208083019390935260409182016000908120918c1681529252902054906121b3565b6017546000906001600160a01b0316331461145a5760405162461bcd60e51b81526004016108c690613293565b610d61838361242e565b60085481565b6001546001600160a01b03163381146114955760405162461bcd60e51b81526004016108c690613334565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b039092166001600160a01b0319928316179055600180549091169055565b6017546001600160a01b031681565b6000610d61620d2f0061082c846001016008546120ee90919063ffffffff16565b60115460ff161561154a5760405162461bcd60e51b81526004016108c69061315f565b336000908152601b6020908152604080832084845260018082019093529083208054928101805460028301805493879055918690559085905560188054939591938790811061159557fe5b90600052602060002090600a02019050818160030154116115b75760006115bf565b818160030154035b60038201556017546001600160a01b03161561163a5760175460405163fe8f376960e01b81526001600160a01b039091169063fe8f3769906116079033908690600401613002565b600060405180830381600087803b15801561162157600080fd5b505af1158015611635573d6000803e3d6000fd5b505050505b6000612710611654600954876120ee90919063ffffffff16565b8161165b57fe5b0490506000612710611678600a54876120ee90919063ffffffff16565b8161167f57fe5b049050611690336112f58885612171565b61169e336113158784612171565b82546116b3906001600160a01b03168361273d565b60018301546116cb906001600160a01b03168261273d565b6116d5338561278c565b5050336000908152601a6020526040812055505050505050565b6116f7612caf565b6018828154811061170457fe5b6000918252602090912060408051606081019182905292600a029091016007019060039082845b81548152602001906001019080831161172b5750505050509050919050565b60115460ff1681565b600060085443116117765760405162461bcd60e51b81526004016108c69061313c565b6000611780612862565b5091505061178d816118db565b60105543600f556001600160a01b03831615611820576001600160a01b0383166000908152601a6020908152604080832054601b909252909120546010546117f4929161089291670de0b6b3a764000091610832916117eb91612171565b61082c896118c0565b6001600160a01b0384166000908152601a6020908152604080832093909355601054601b909152919020555b6001600160a01b0383166000908152601a6020526040908190205490517f023b2764fdc69b1eb3c97dd5b1fe33df596e55cbd731ee8b0e3b9758f8f2686d9161186b91869190613002565b60405180910390a150919050565b6000546001600160a01b031633146118a35760405162461bcd60e51b81526004016108c6906132ff565b6011805461ff001981166101009182900460ff1615909102179055565b6001600160a01b031660009081526002602052604090205490565b60006118e56110a1565b6118f2575060105461089e565b610d616119126119006110a1565b61083285670de0b6b3a76400006120ee565b601054906121b3565b6000546001600160a01b031681565b600080600061193885611f80565b9050600061194585611f80565b9050855b81831161199757600061195b84611506565b9050808710156119685750855b61198861198161197786611058565b61082c8486612171565b87906121b3565b95506001909301929050611949565b61199f6110a1565b93506a0422ca8b0a00a4250000008411156119c3576a0422ca8b0a00a42500000093505b5050509250929050565b60068054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610c415780601f10610c1657610100808354040283529160200191610c41565b611a36612caf565b60188281548110611a4357fe5b6000918252602091829020604080516060810191829052600a909302909101600481018054845292936003929160050190850180831161172b5750505050509050919050565b6017546001600160a01b03163314611ab35760405162461bcd60e51b81526004016108c690613293565b611abd828261278c565b5050565b600f5481565b6000546001600160a01b03163314611af15760405162461bcd60e51b81526004016108c6906132ff565b611afb6000611753565b50601255565b6000610d5d611b0e6124ee565b8461111f856040518060600160405280602581526020016136366025913960036000611b386124ee565b6001600160a01b03908116825260208083019390935260409182016000908120918d168152925290205491906126bb565b601b6020526000908152604090205481565b6000610d5d611b886124ee565b84846125a6565b60135460405163b9b2e68f60e01b8152600091829173__$1139795562d0ae445497d3fa43a7ed0192$__9163b9b2e68f91611bda916001600160a01b0316908890889060040161301b565b604080518083038186803b158015611bf157600080fd5b505af4158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c299190612f57565b915091509250929050565b60188181548110611c4157fe5b60009182526020909120600a909102018054600182015460028301546003909301546001600160a01b03928316945091811692600160a01b90910460ff169185565b60196020526000908152604090205481565b600b546001600160a01b031681565b6000546001600160a01b03163314611cce5760405162461bcd60e51b81526004016108c6906132ff565b600992909255600a55600b80546001600160a01b0319166001600160a01b03909216919091179055565b6013546001600160a01b031681565b611d1033611753565b50336000908152601a60205260409020548015611d4157336000818152601a6020526040812055611d4190826128e8565b7fbc84835063c693975166f00cffb19f01a94c2db55b1bf259238c5da3594e50663382604051611d72929190613002565b60405180910390a150565b60008060005b601854811015611dcc576001600160a01b0384166000908152601b60209081526040808320848452600101909152902060020154611dc29084906121b3565b9250600101611d83565b50611dda82610883856118c0565b9050915091565b600080600e548310611df557506001611dfd565b82600e540390505b60640392915050565b60135460165460155460405163b9b2e68f60e01b815260009384938493849373__$1139795562d0ae445497d3fa43a7ed0192$__9363b9b2e68f93611e5f936001600160a01b039283169391831692169060040161301b565b604080518083038186803b158015611e7657600080fd5b505af4158015611e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eae9190612f57565b91509150600060188681548110611ec157fe5b90600052602060002090600a020190508261271082600401600260038110611ee557fe5b015483600201548560125462a066800202020281611eff57fe5b0481611f0757fe5b049450806003015493506000611f1b6110a1565b90508015611f34578085870281611f2e57fe5b04611f37565b60005b955050505050915091565b6000546001600160a01b03163314611f6c5760405162461bcd60e51b81526004016108c6906132ff565b6011805460ff19811660ff90911615179055565b600060085482111561089e57620d2f00600854830381611f9c57fe5b0492915050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b60105481565b6000546001600160a01b03163314611ffe5760405162461bcd60e51b81526004016108c6906132ff565b601780546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b600a5481565b601154610100900460ff1681565b6000806000612054600f544361192a565b915091506000612088600d546108326a0422ca8b0a00a4250000006108328661082c6012548a6120ee90919063ffffffff16565b6001600160a01b0387166000818152601b602081815260408084208b855260018101835290842060020154949093525254919250906120e390670de0b6b3a764000090610832906120dc90610883876118db565b84906120ee565b979650505050505050565b6000826120fd57506000610d61565b8282028284828161210a57fe5b04146121285760405162461bcd60e51b81526004016108c6906132be565b9392505050565b600061212883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612a87565b600061212883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506126bb565b6000828201838110156121285760405162461bcd60e51b81526004016108c6906131d8565b601354835460155460405163b9b2e68f60e01b8152600093849384938493849373__$1139795562d0ae445497d3fa43a7ed0192$__9363b9b2e68f93612234936001600160a01b0393841693928316929091169060040161301b565b604080518083038186803b15801561224b57600080fd5b505af415801561225f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122839190612f57565b60135460018b015460155460405163b9b2e68f60e01b8152949650929450600093849373__$1139795562d0ae445497d3fa43a7ed0192$",
  "libraries": {
    "PriceLibrary": "0xF3ed1A8248EC2488b831835b98208f6329A89768"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2972,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2974,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2059,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2065,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2067,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2069,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_name",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 2071,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 2073,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "_decimals",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 103,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "startBlock",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 106,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "feeA",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 109,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "feeB",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 111,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "feeOwner",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 114,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "DIVISOR",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 117,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "BASE_INIT",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 120,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "BASE_RATE",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 130,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "lastUpdateBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 132,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 135,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "paused",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 138,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "transferPaused",
        "offset": 1,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "domsPerBlock",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 142,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "factory",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 145,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "dead",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 147,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "usdt",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 149,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "dom",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IERC20)2648"
      },
      {
        "astId": 151,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "inviter",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IInvite)2665"
      },
      {
        "astId": 154,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "pools",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_struct(Pool)101_storage)dyn_storage"
      },
      {
        "astId": 158,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "yinit",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 162,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "rewards",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 166,
        "contract": "contracts/DomPool.sol:DomPool",
        "label": "users",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_struct(User)82_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Pool)101_storage)dyn_storage": {
        "base": "t_struct(Pool)101_storage",
        "encoding": "dynamic_array",
        "label": "struct DomPool.Pool[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)2648": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInvite)2665": {
        "encoding": "inplace",
        "label": "contract IInvite",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(User)82_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct DomPool.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)82_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(DepositInfo)75_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DomPool.DepositInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositInfo)75_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositInfo)75_storage": {
        "encoding": "inplace",
        "label": "struct DomPool.DepositInfo",
        "members": [
          {
            "astId": 70,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "amountA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 72,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "amountB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 74,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "amountR",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Pool)101_storage": {
        "encoding": "inplace",
        "label": "struct DomPool.Pool",
        "members": [
          {
            "astId": 84,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "tokenA",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)2648"
          },
          {
            "astId": 86,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "tokenB",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)2648"
          },
          {
            "astId": 88,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "status",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 90,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "maxWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 92,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "totalAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 96,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "minWeight",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint256)3_storage"
          },
          {
            "astId": 100,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "proportions",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)3_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(User)82_storage": {
        "encoding": "inplace",
        "label": "struct DomPool.User",
        "members": [
          {
            "astId": 77,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "rewardPerTokenPaid",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 81,
            "contract": "contracts/DomPool.sol:DomPool",
            "label": "deposits",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_struct(DepositInfo)75_storage)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}