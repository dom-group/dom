{
  "language": "Solidity",
  "sources": {
    "contracts/DomPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\npragma experimental ABIEncoderV2;\r\nimport \"./Ownable.sol\";\r\nimport \"./IInvite.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport \"./ERC20.sol\";\r\nimport \"./PriceLibrary.sol\";\r\n\r\ncontract DomPool is Ownable, ERC20 {\r\n\r\n    using SafeMath for  uint256;\r\n    using SafeERC20 for IERC20;\r\n\r\n    constructor(\r\n        address _usdt, \r\n        address _factory, \r\n        IERC20 _dom,\r\n        uint256 _domsPerBlock,\r\n        uint256 _startBlock,\r\n        address _feeOwner\r\n    ) \r\n    public ERC20 (\"Dom HashRate\",\"DHR\")\r\n    {\r\n        usdt = _usdt;\r\n        factory = _factory;\r\n        dom = _dom;\r\n        domsPerBlock = _domsPerBlock;\r\n        startBlock = _startBlock;\r\n        lastUpdateBlock = _startBlock;\r\n        feeOwner = _feeOwner;\r\n        initRate();\r\n    }\r\n\r\n    struct DepositInfo {\r\n        uint256 amountA;\r\n        uint256 amountB;\r\n        uint256 amountR;\r\n    }\r\n\r\n    struct User {\r\n        uint256 rewardPerTokenPaid;\r\n        mapping(uint=>DepositInfo) deposits;\r\n    }\r\n\r\n    struct Pool {\r\n        IERC20 tokenA;\r\n        IERC20 tokenB; \r\n        bool status;\r\n        uint256 maxWeight;\r\n        uint256 totalAmount;\r\n        uint256[3] minWeight;\r\n        uint256[3] proportions;\r\n    }\r\n\r\n    // The block number when doms mining starts.\r\n    uint256 public startBlock;\r\n    \r\n    uint256 public feeA = 100;\r\n    uint256 public feeB = 100;\r\n    address public feeOwner;\r\n    \r\n    uint256 internal DIVISOR = 100;\r\n    uint256 internal BASE_INIT = 1000000;\r\n    uint256 internal BASE_RATE = 5;\r\n\r\n    uint256 constant internal REDUCE_PERIOD = 864000;\r\n    uint256 constant internal THRESHOLD = 5000000 * 1e18 ;\r\n    uint256 public lastUpdateBlock;\r\n    uint256 public rewardPerTokenStored;\r\n\r\n    bool public paused = false;\r\n    bool public transferPaused = true;\r\n    // dom tokens created per block.\r\n    uint256 public domsPerBlock;\r\n\r\n    address public factory;\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    address public usdt;\r\n    IERC20  public dom;\r\n\r\n    IInvite public inviter;\r\n\r\n\r\n    Pool[] public pools;\r\n    mapping( uint => uint) public yinit;\r\n    //uint[3] public proportions = [80,70,50];\r\n\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => User) public users;\r\n\r\n    event Deposit(address indexed,uint,uint,uint,uint);\r\n    event Withdraw(address indexed,uint,uint,uint,uint);\r\n    event WithdrawReward(address index, uint );\r\n    event UpdateReward(address index,uint);\r\n\r\n    modifier notPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n\r\n    modifier transferNotPause() {\r\n        require(paused == false, \"Mining has been suspended\");\r\n        _;\r\n    }\r\n \r\n    function initRate() internal {\r\n        uint curRate = BASE_INIT;\r\n        uint base = 100**11;\r\n        for(uint i = 0; i<17; i++) {\r\n            yinit[i] = curRate;\r\n            uint _yrate = yrate(i);\r\n            uint _yLast = curRate.mul(\r\n                _yrate**11\r\n            )/base;\r\n            curRate = _yLast.mul(yrate(i+1))/100;\r\n        }\r\n\r\n    }\r\n\r\n    function yrate(uint _year) public view returns(uint256) {\r\n        uint rate;\r\n        \r\n        if(_year>=BASE_RATE) {\r\n            rate = 1;\r\n        }else{\r\n            rate = BASE_RATE-_year;\r\n        }\r\n\r\n        return 100 - rate;\r\n    }\r\n\r\n    function mrate(uint _month) public view returns (uint) {\r\n        uint _year = _month/12;\r\n        uint _yinitRate = yinit[_year];\r\n        uint _yrate = yrate(_year);\r\n        uint _mi = _month%12;\r\n        return _yinitRate.mul(_yrate**_mi)/(100**_mi);\r\n    }\r\n\r\n    function mint(address _to, uint256 _amount) external override returns(bool) {\r\n        require(msg.sender == address(inviter), \"forbidden operate\");\r\n        _mint(_to,_amount);\r\n    }\r\n\r\n    function burn(address _to,uint _amount) public override {\r\n        require(msg.sender == address(inviter), \"forbidden operate\");\r\n        _burn(_to,_amount);\r\n    }\r\n\r\n    function setPause() public onlyOwner {\r\n        paused = !paused;\r\n    }\r\n\r\n    function setTransferPause() public onlyOwner {\r\n        transferPaused = !transferPaused;\r\n    }\r\n\r\n    function setInviter(IInvite _inviter) public onlyOwner {\r\n        inviter = _inviter;\r\n    }\r\n\r\n    function setDomPerBlock(uint _domPerBlock) public onlyOwner {\r\n        updateReward(address(0));\r\n        domsPerBlock = _domPerBlock;\r\n    }\r\n\r\n    // Migrate lp token to another lp contract. Can be called by anyone. We trust that migrator contract is good.\r\n    function migrate(address token,address _to) public onlyOwner {\r\n       IERC20 _token = IERC20(token);\r\n       uint bal = _token.balanceOf(address(this));\r\n       _token.transfer(_to, bal);\r\n    }\r\n\r\n     function add(\r\n        IERC20 _tokenA,\r\n        IERC20 _tokenB,\r\n        uint256 _maxWeight,\r\n        uint256[3] memory _minWeight,\r\n        uint256[3] memory _proportions\r\n    ) public onlyOwner {    \r\n        pools.push(\r\n            Pool({\r\n                tokenA: _tokenA,\r\n                tokenB: _tokenB,\r\n                status: true,\r\n                totalAmount: 0,\r\n                maxWeight: _maxWeight,\r\n                minWeight: _minWeight,\r\n                proportions: _proportions\r\n            })\r\n        );\r\n    }\r\n\r\n     function set(\r\n        uint256 _pid,\r\n        bool _status,\r\n        uint256 _maxWeight,\r\n        uint256[3] memory _minWeight,\r\n        uint256[3] memory _proportions\r\n    ) public onlyOwner {\r\n        pools[_pid].status = _status;\r\n        pools[_pid].maxWeight = _maxWeight;\r\n        pools[_pid].minWeight = _minWeight;\r\n        pools[_pid].proportions = _proportions;\r\n    }\r\n    \r\n    function setFee(uint _feeA,uint _feeB,address _feeOwner) public onlyOwner {\r\n        feeA = _feeA;\r\n        feeB = _feeB;\r\n        feeOwner = _feeOwner;\r\n    }\r\n\r\n    function updateAndMint() internal returns( uint domincr, uint domactul, uint burned ) {\r\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\r\n        domincr = multiplier.mul(domsPerBlock).div(BASE_INIT);\r\n        //bool _minted = dom.mint(address(this), domincr);\r\n        //if(_minted){\r\n        domactul = domincr.mul(curHash).div(THRESHOLD);\r\n        burned = domincr.sub(domactul);\r\n        if(burned>0) dom.safeTransfer(dead,burned);\r\n        //}\r\n    }\r\n\r\n    function updateReward(address account) public returns(uint256) {\r\n        require(block.number>startBlock,\"not start\");\r\n        ( , uint domactul, ) = updateAndMint();\r\n        rewardPerTokenStored = rewardPerToken(domactul);\r\n        lastUpdateBlock = block.number;\r\n        if (account != address(0)) {\r\n            rewards[account] = \r\n                balanceOf(account)\r\n                .mul(\r\n                    rewardPerTokenStored.sub(users[account].rewardPerTokenPaid)\r\n                )\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n\r\n            users[account].rewardPerTokenPaid = rewardPerTokenStored;\r\n        }\r\n        emit UpdateReward(account, rewards[account]);\r\n    }\r\n\r\n    function rewardPerToken(uint domactul) public view returns(uint256) {\r\n        if (totalSupply() == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n        return rewardPerTokenStored.add(\r\n            domactul.mul(1e18).div(totalSupply())\r\n        );\r\n    }\r\n\r\n    function earned(address account) public view returns (uint256) {\r\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\r\n        uint domactul = multiplier.mul(domsPerBlock).mul(curHash).div(THRESHOLD).div(BASE_INIT);\r\n        return\r\n            balanceOf(account)\r\n                .mul(\r\n                    rewardPerToken(domactul).sub(users[account].rewardPerTokenPaid)\r\n                )\r\n                .div(1e18)\r\n                .add(rewards[account]);\r\n    }\r\n\r\n    function poolEarned(address account, uint _pid) public view returns (uint256) {\r\n        (uint256 multiplier,uint256 curHash) = getMultiplier(lastUpdateBlock,block.number);\r\n        uint domactul = multiplier.mul(domsPerBlock).mul(curHash).div(THRESHOLD).div(BASE_INIT);\r\n        uint _balance = users[account].deposits[_pid].amountR;\r\n        return\r\n            _balance\r\n                .mul(\r\n                    rewardPerToken(domactul).sub(users[account].rewardPerTokenPaid)\r\n                )\r\n                .div(1e18);\r\n    }\r\n\r\n    function APR(uint _pid) public view returns(uint yopt, uint cic) {\r\n        (uint unitDom,uint256 priceDom) = PriceLibrary.price(factory,address(dom),usdt);\r\n        Pool storage pool = pools[_pid];\r\n        yopt = (28800*365*domsPerBlock)*priceDom*pool.maxWeight*(pool.minWeight[2])/10000/unitDom;\r\n        cic = pool.totalAmount;\r\n        uint _totalSupply = totalSupply();\r\n        yopt = _totalSupply==0?0:yopt*cic/_totalSupply;\r\n    }\r\n    \r\n    function deposit(uint256 _pid, uint256 _amountT, uint256 _rid) public notPause {\r\n        Pool storage pool = pools[_pid];\r\n        require(pool.status,\"closed\");\r\n        updateReward(msg.sender);\r\n\r\n         uint _amountA;\r\n         uint _amountB;\r\n         uint _amountR;\r\n         \r\n        \r\n        ( _amountA, _amountB,_amountR) = transferAmount(pool,_rid,_amountT);\r\n        \r\n        \r\n        if(address(inviter)!=address(0)) inviter.referReward(msg.sender,_amountR);\r\n\r\n        users[msg.sender].deposits[_pid].amountA = users[msg.sender].deposits[_pid].amountA.add(_amountA);\r\n        users[msg.sender].deposits[_pid].amountB = users[msg.sender].deposits[_pid].amountB.add(_amountB);\r\n        users[msg.sender].deposits[_pid].amountR = users[msg.sender].deposits[_pid].amountR.add(_amountR);\r\n\r\n        pool.totalAmount = pool.totalAmount.add(_amountR);\r\n\r\n        _mint(msg.sender,_amountR);\r\n\r\n        emit Deposit(msg.sender,_pid,_amountA,_amountB, _amountR);\r\n\r\n    }\r\n    \r\n    \r\n    function transferAmount(Pool storage pool,uint256 _rid,uint256 _amountT ) internal returns(uint256 _amountA,uint256 _amountB,uint256 _amountR) {\r\n        \r\n        (uint unitA,uint256 priceA) = PriceLibrary.price(factory,address(pool.tokenA),usdt);\r\n        (uint unitB,uint256 priceB) = PriceLibrary.price(factory,address(pool.tokenB),usdt);    \r\n            \r\n        _amountA = _amountT.mul(unitA).mul(pool.proportions[_rid]).div(priceA)/DIVISOR;\r\n        _amountB = _amountT.mul(unitB).mul(uint(100).sub(pool.proportions[_rid])).div(priceB)/DIVISOR;\r\n        \r\n        pool.tokenA.safeTransferFrom(msg.sender,address(this),_amountA);\r\n        pool.tokenB.safeTransferFrom(msg.sender,address(this),_amountB); \r\n\r\n        require(priceA!=0&&priceB!=0,\"Invalid price\");\r\n        _amountR = _amountT*pool.maxWeight*pool.minWeight[_rid]/10000;\r\n    }\r\n\r\n    function withdraw(uint256 _pid) public notPause {\r\n        withdrawReward();\r\n        User storage user = users[msg.sender];\r\n        uint256 amountA = user.deposits[_pid].amountA;\r\n        uint256 amountB = user.deposits[_pid].amountB;\r\n        uint256 amountR = user.deposits[_pid].amountR;\r\n\r\n\r\n        user.deposits[_pid].amountA = 0;\r\n        user.deposits[_pid].amountB = 0;\r\n        user.deposits[_pid].amountR = 0;\r\n        Pool storage pool = pools[_pid];\r\n        pool.totalAmount = pool.totalAmount>amountR?pool.totalAmount-amountR:0;\r\n        if(address(inviter)!=address(0)) inviter.redeemPower(msg.sender,amountR);\r\n        \r\n        uint256 amountFeeA = amountA.mul(feeA)/10000;\r\n        uint256 amountFeeB = amountB.mul(feeB)/10000;\r\n\r\n        pool.tokenA.safeTransfer(msg.sender, amountA.sub(amountFeeA));\r\n        pool.tokenB.safeTransfer(msg.sender, amountB.sub(amountFeeB));\r\n        \r\n        transferFee(pool.tokenA,amountFeeA);\r\n        transferFee(pool.tokenB,amountFeeB);\r\n        \r\n        _burn(msg.sender, amountR);\r\n\r\n        emit Withdraw(msg.sender,_pid,amountA,amountB,amountR);\r\n    }\r\n    \r\n    \r\n    function transferFee(IERC20 token,uint256 fee) internal {\r\n        if(address(token)==address(dom)) {\r\n            token.safeTransfer(dead,fee);\r\n        }else{\r\n            token.safeTransfer(feeOwner,fee);\r\n        }\r\n    }\r\n\r\n    function withdrawReward() public  {\r\n        updateReward(msg.sender);\r\n        uint256 reward = rewards[msg.sender];\r\n        if (reward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            safeDomTransfer(msg.sender,reward);\r\n        }\r\n\r\n        emit WithdrawReward(msg.sender,reward);\r\n    }\r\n\r\n    function emergencyWithdraw(uint256 _pid) public notPause {\r\n        User storage user = users[msg.sender];\r\n        uint256 amountA = user.deposits[_pid].amountA;\r\n        uint256 amountB = user.deposits[_pid].amountB;\r\n        uint256 amountR = user.deposits[_pid].amountR;\r\n        user.deposits[_pid].amountA = 0;\r\n        user.deposits[_pid].amountB = 0;\r\n        user.deposits[_pid].amountR = 0;\r\n        Pool storage pool = pools[_pid];\r\n        pool.totalAmount = pool.totalAmount>amountR?pool.totalAmount-amountR:0;\r\n        if(address(inviter)!=address(0)) inviter.redeemPower(msg.sender,amountR);\r\n        uint256 amountFeeA = amountA.mul(feeA)/10000;\r\n        uint256 amountFeeB = amountB.mul(feeB)/10000;\r\n\r\n        pool.tokenA.safeTransfer(msg.sender, amountA.sub(amountFeeA));\r\n        pool.tokenB.safeTransfer(msg.sender, amountB.sub(amountFeeB));\r\n        \r\n        transferFee(pool.tokenA,amountFeeA);\r\n        transferFee(pool.tokenB,amountFeeB);\r\n        _burn(msg.sender, amountR);\r\n         rewards[msg.sender] = 0;\r\n    }\r\n\r\n    // Return reward multiplier over the given _from to _to block.\r\n    function getMultiplier(uint256 _from, uint256 _to)\r\n        public\r\n        view\r\n        returns (uint256 multiplier,uint256 curHash)\r\n    {\r\n\r\n        uint fromPeriod = period(_from);\r\n        uint toPeriod   = period(_to);\r\n        uint _startBlock = _from;\r\n        \r\n        for(;fromPeriod<=toPeriod;fromPeriod++){\r\n            uint _endBlock = bonusEndBlock(fromPeriod);\r\n            if(_to<_endBlock) _endBlock = _to;\r\n            multiplier = multiplier.add(\r\n                _endBlock.sub(_startBlock).mul(mrate(fromPeriod))\r\n            );\r\n            _startBlock = _endBlock;\r\n        }\r\n\r\n        curHash = totalSupply();\r\n        if(curHash>THRESHOLD){\r\n            curHash = THRESHOLD;\r\n        }\r\n    }\r\n\r\n    function getDeposit(address account,uint pid) public view returns(DepositInfo memory depositInfo) {\r\n        return users[account].deposits[pid];\r\n    }\r\n\r\n    function getMinWeight(uint _pid) public view returns(uint[3] memory) {\r\n        return pools[_pid].minWeight;\r\n    }\r\n\r\n    function getProportions(uint _pid) public view returns(uint[3] memory) {\r\n        return pools[_pid].proportions;\r\n    }\r\n\r\n    function getPrice(address tokenA,address tokenB) public view returns(uint,uint) {\r\n        return PriceLibrary.price(factory, tokenA, tokenB);\r\n    }\r\n\r\n    function getBalanceOfHash(address account) public view returns(uint poolHash,uint teamHash) {\r\n            for(uint i = 0;i<pools.length;i++) {\r\n                poolHash = poolHash.add(users[account].deposits[i].amountR);\r\n            }\r\n            teamHash = balanceOf(account).sub(poolHash);\r\n    }\r\n\r\n\r\n    function bonusEndBlock(uint256 _period) public view returns (uint) {\r\n        return startBlock.mul(_period+1).mul(REDUCE_PERIOD);\r\n    }\r\n\r\n    function period(uint256 blockNumber) public view returns (uint _period) {\r\n        if(blockNumber>startBlock) {\r\n            _period = (blockNumber-startBlock)/REDUCE_PERIOD;\r\n        }\r\n    }\r\n\r\n    function poolLength() public view returns (uint256) {\r\n        return pools.length;\r\n    }\r\n\r\n    // Safe Bats transfer function, just in case if rounding error causes pool to not have enough Batss.\r\n    function safeDomTransfer(address _to, uint256 _amount) internal {\r\n        uint256 domBal = dom.balanceOf(address(this));\r\n        if (_amount > domBal) {\r\n            dom.transfer(_to, domBal);\r\n        } else {\r\n            dom.transfer(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 ) internal transferNotPause override virtual {\r\n        if(from!=address(this)&&from!=address(inviter)) {\r\n            updateReward(from);\r\n        }\r\n        if(to!=address(this)&&to!=address(inviter)) {\r\n            updateReward(to);\r\n        }\r\n     }\r\n\r\n}"
    },
    "contracts/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\ncontract OwnableData {\r\n    // V1 - V5: OK\r\n    address public owner;\r\n    // V1 - V5: OK\r\n    address public pendingOwner;\r\n}\r\n// T1 - T4: OK\r\ncontract Ownable is OwnableData {\r\n    // E1: OK\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () public {\r\n        owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\r\n        if (direct) {\r\n            // Checks\r\n            require(newOwner != address(0) || renounce, \"Ownable: zero address\");\r\n\r\n            // Effects\r\n            emit OwnershipTransferred(owner, newOwner);\r\n            owner = newOwner;\r\n            pendingOwner = address(0);\r\n        } else {\r\n            // Effects\r\n            pendingOwner = newOwner;\r\n        }\r\n    }\r\n\r\n    // F1 - F9: OK\r\n    // C1 - C21: OK\r\n    function claimOwnership() public {\r\n        address _pendingOwner = pendingOwner;\r\n        \r\n        // Checks\r\n        require(msg.sender == _pendingOwner, \"Ownable: caller != pending owner\");\r\n\r\n        // Effects\r\n        emit OwnershipTransferred(owner, _pendingOwner);\r\n        owner = _pendingOwner;\r\n        pendingOwner = address(0);\r\n    }\r\n\r\n    // M1 - M5: OK\r\n    // C1 - C21: OK\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n}"
    },
    "contracts/IInvite.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\n\r\ninterface IInvite {\r\n    // referring reward for different level\r\n    function referReward(address _userAddr, uint256 _power) external;\r\n    // redeem power for diffrent level\r\n    function redeemPower(address _userAddr, uint256 _power) external;\r\n}"
    },
    "contracts/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\n\r\nimport './SafeMath.sol';\r\nimport './IERC20.sol';\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nlibrary SafeERC20 {\r\n    \r\n    using SafeMath for uint256;\r\n\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\r\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves.\r\n\r\n        // A Solidity high level call has three parts:\r\n        //  1. The target address is checked to verify it contains contract code\r\n        //  2. The call itself is made, and success asserted\r\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\r\n        // solhint-disable-next-line max-line-length\r\n        require(Address.isContract(address(token)), \"SafeERC20: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        require(success, \"SafeERC20: low-level call failed\");\r\n\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}"
    },
    "contracts/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\n\r\nimport \"./IERC20.sol\";\r\nimport \"./SafeMath.sol\";\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\nabstract contract ERC20 is Context, IERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint8 private _decimals;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\r\n     * a default value of 18.\r\n     *\r\n     * To select a different value for {decimals}, use {_setupDecimals}.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor (string memory name_, string memory symbol_) public {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view override virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view override virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\r\n     * called.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view override virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply = _totalSupply.add(amount);\r\n        _balances[account] = _balances[account].add(amount);\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\r\n        _totalSupply = _totalSupply.sub(amount);\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets {decimals} to a value other than the default one of 18.\r\n     *\r\n     * WARNING: This function should only be called from the constructor. Most\r\n     * applications that interact with token contracts will not expect\r\n     * {decimals} to ever change, and may work incorrectly if it does.\r\n     */\r\n    function _setupDecimals(uint8 decimals_) internal virtual {\r\n        _decimals = decimals_;\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n}\r\n"
    },
    "contracts/PriceLibrary.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\nimport \"./SafeMath.sol\";\r\nimport \"./IERC20.sol\";\r\nimport \"./IPancakeFactory.sol\";\r\n\r\nlibrary PriceLibrary {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    function price(address _factory, address _from, address _to) public view returns(uint inAmount,uint outAmount) { \r\n        inAmount = unit(_from);\r\n        if(_from==_to){\r\n            return (inAmount,inAmount);\r\n        }\r\n        \r\n        address _pair = IPancakeFactory(_factory).getPair(_from, _to);\r\n        \r\n        if(_pair!=address(0)){\r\n            IPancakePair pair = IPancakePair(_pair);\r\n            (uint112 ureserve0, uint112 ureserve1,) = pair.getReserves();\r\n            address token1 = pair.token1();\r\n            if(token1!=address(_to)){\r\n                ( ureserve0,  ureserve1) = (ureserve1, ureserve0);\r\n            }\r\n            outAmount = getAmountOut(inAmount, ureserve0, ureserve1);\r\n        }\r\n    }\r\n\r\n    function unit(address token) public view returns(uint) {\r\n        uint _decimals = IERC20(token).decimals();\r\n        return 10**_decimals;\r\n    }\r\n\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\r\n        require(amountIn > 0, 'PankSwapLibrary: INSUFFICIENT_INPUT_AMOUNT');\r\n        require(reserveIn > 0 && reserveOut > 0, 'PankSwapLibrary: INSUFFICIENT_LIQUIDITY');\r\n        amountOut = amountIn*reserveOut/reserveIn;\r\n    }\r\n\r\n}"
    },
    "contracts/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\n\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     * - Subtraction cannot overflow.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * Reverts with custom message when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     * - The divisor cannot be zero.\r\n     *\r\n     * _Available since v2.4.0._\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n"
    },
    "contracts/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.6.8;\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n    function mint(address to, uint256 amount) external returns (bool);\r\n    function burn(address to, uint256 amount) external;\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n"
    },
    "contracts/IPancakeFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\ninterface IPancakeFactory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IPancakePair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}"
    },
    "contracts/invite.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.8;\r\nimport \"./PriceLibrary.sol\";\r\nimport \"./SafeERC20.sol\";\r\nimport './IERC20.sol';\r\nimport './Ownable.sol';\r\n\r\n\r\ncontract DomInvitation is Ownable {\r\n    using SafeMath for uint256;\r\n    struct user {\r\n        uint256 id;\r\n        uint256 level;\r\n        uint256 burn;\r\n        address referrer;\r\n    }\r\n\r\n    uint256 public userCount;\r\n    address public primaryAddr;\r\n    \r\n    address public factory;\r\n    address public dead = 0x000000000000000000000000000000000000dEaD;\r\n\r\n    IERC20 public pToken;\r\n    IERC20 public domToken;\r\n    IERC20 public usdtToken;\r\n\r\n    //uint256[10] public marketList = [30, 20, 10, 9, 8, 7, 6, 4, 4, 4];\r\n    uint256[10] public marketList = [25, 6, 10, 6, 10, 6, 10, 6, 15, 6];\r\n    //uint256[6] public levelList = [0, 100*1e18, 300*1e18, 500*1e18, 1000*1e18, 1500*1e18];\r\n    uint256[6] public levelList = [0, 100*1e18, 200*1e18, 200*1e18, 500*1e18, 500*1e18];\r\n    \r\n    mapping(address => user) public Users;\r\n    mapping(uint256 => address) public index2User;\r\n    mapping(uint256 => uint256[20]) levelReferMap;\r\n\r\n    event Register(address indexed _userAddr, address indexed _referrer);\r\n    event Promote(address indexed _userAddr, uint256 level);\r\n    event Burn(address indexed _userAddr, uint256 _amount);\r\n    event Redeem(address indexed _userAddr, uint256 _power);\r\n\r\n    constructor(IERC20 _pToken, IERC20 _domToken, address _primaryAddr) public {\r\n        pToken = _pToken;\r\n        domToken = _domToken;\r\n        userCount = userCount.add(1);\r\n        Users[_primaryAddr].id = userCount;\r\n        \r\n        index2User[userCount] = _primaryAddr;\r\n        primaryAddr = _primaryAddr;\r\n        \r\n        level_init();\r\n        emit Register(_primaryAddr, address(0));\r\n    }\r\n\r\n    function level_init() internal {\r\n        // init level 0\r\n        levelReferMap[0] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        // init level 1\r\n        levelReferMap[1] = [15, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        // init level 2\r\n        levelReferMap[2] = [16, 11, 9, 6, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        // init level 3\r\n        levelReferMap[3] = [18, 13, 11, 9, 7, 5, 4, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        // init level 4\r\n        levelReferMap[4] = [20, 15, 13, 11, 9, 7, 6, 5, 4, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0];\r\n        // init level 5\r\n        levelReferMap[5] = [25, 20, 15, 13, 11, 9, 7, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\n    }\r\n\r\n    function setMarketList(uint256[10] memory _marketList) onlyOwner public {\r\n        marketList = _marketList;\r\n    }\r\n\r\n    function setLevelRewardList(uint256 _levelId, uint256[20] memory _levelRewardList) onlyOwner public {\r\n        levelReferMap[_levelId] = _levelRewardList;\r\n    }\r\n\r\n    function setPToken(IERC20 _pToken) onlyOwner public {\r\n        pToken = _pToken;\r\n    }\r\n\r\n    function setDomToken(IERC20 _domToken) onlyOwner public {\r\n        domToken = _domToken;\r\n    }\r\n\r\n    function setFactory(address _factory, IERC20 _usdtToken) onlyOwner public {\r\n        usdtToken = _usdtToken;\r\n        factory = _factory;\r\n    }\r\n\r\n    function register(address _referrer) public {\r\n        require(!Address.isContract(msg.sender), \"contract address is forbidden\");\r\n        require(!isExists(msg.sender), \"user exists\");\r\n        require(isExists(_referrer), \"referrer not exists\");\r\n        user storage regUser = Users[msg.sender];\r\n        userCount = userCount.add(1);\r\n        regUser.id = userCount;\r\n        index2User[userCount] = msg.sender;\r\n        regUser.referrer = _referrer;\r\n        \r\n        \r\n        emit Register(msg.sender, _referrer);\r\n    }\r\n\r\n    function isExists(address _userAddr) view public returns (bool) {\r\n        return Users[_userAddr].id != 0;\r\n    }\r\n\r\n    function promote(uint256 _level) public {\r\n        require(isExists(msg.sender), \"user not exists\");\r\n        require(Users[msg.sender].level < _level, \"level is lower than the last one\");\r\n        require(_level <= 5, \"level exceeds\");\r\n        (uint inAmount, uint outAmount) = PriceLibrary.price(factory, address(usdtToken), address(domToken));\r\n        require(outAmount!=0,\"Invalid price\");\r\n        uint256 levelAmount = 0;\r\n        // due to promote more than one level\r\n        for(uint256 i = Users[msg.sender].level+1; i <= _level; i++) {\r\n            levelAmount = levelAmount.add(levelList[i]);\r\n        }\r\n        uint256 burnAmount = outAmount.mul(levelAmount).div(inAmount);\r\n        require(domToken.balanceOf(msg.sender) >= burnAmount, \"dom is not enough\");\r\n        marketReward(msg.sender, burnAmount);\r\n        Users[msg.sender].level = _level;\r\n        Users[msg.sender].burn = Users[msg.sender].burn.add(burnAmount);\r\n        emit Promote(msg.sender, _level);\r\n    }\r\n\r\n    function referReward(address _userAddr, uint256 _power) external {\r\n        require(msg.sender == address(pToken), \"only pToken can call referReward\");\r\n        address preAddr = Users[_userAddr].referrer;\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            if(preAddr == address(0)) {\r\n                break;\r\n            }\r\n            uint256 rewardRate = levelReferMap[Users[preAddr].level][i];\r\n            if (rewardRate > 0){\r\n                pToken.mint(preAddr, _power.mul(rewardRate).div(100));\r\n            }\r\n            preAddr = Users[preAddr].referrer;\r\n        }\r\n        emit Promote(msg.sender, _power);\r\n    }\r\n\r\n    function redeemPower(address _userAddr, uint256 _power) external {\r\n        require(msg.sender == address(pToken), \"only pToken can call redeemPower\");\r\n        address preAddr = Users[_userAddr].referrer;\r\n        for(uint256 i = 0; i < 20; i++) {\r\n            if(preAddr == address(0)) {\r\n                break;\r\n            }\r\n            uint256 rewardRate = levelReferMap[Users[preAddr].level][i];\r\n            uint256 bal = pToken.balanceOf(preAddr);\r\n            uint256 rew = _power.mul(rewardRate).div(100);\r\n            if (rew > bal) {\r\n                pToken.burn(preAddr, bal);\r\n            } else {\r\n                pToken.burn(preAddr, rew);\r\n            }\r\n            preAddr = Users[preAddr].referrer;\r\n        }\r\n    }\r\n\r\n    function marketReward(address _userAddr, uint256 _amount) internal{\r\n        address preAddr = Users[_userAddr].referrer;\r\n        uint256 amount = _amount.div(2);\r\n        uint256 rewardTotalAmount = 0;\r\n        for(uint256 i = 0; i < 10; i++) {\r\n\r\n            if(preAddr == address(0)) {\r\n                break;\r\n            }\r\n            uint256 level = Users[preAddr].level;\r\n            \r\n            if(i<level.mul(2)) {\r\n                uint256 rewardAmount = amount.mul(marketList[i]).div(100);\r\n                domToken.transferFrom(msg.sender, preAddr, rewardAmount);\r\n                rewardTotalAmount = rewardTotalAmount.add(rewardAmount);\r\n            }\r\n            \r\n            preAddr = Users[preAddr].referrer;\r\n        }\r\n        domToken.transferFrom(msg.sender, dead, _amount.sub(rewardTotalAmount));\r\n        emit Burn(msg.sender, _amount.sub(rewardTotalAmount));\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}